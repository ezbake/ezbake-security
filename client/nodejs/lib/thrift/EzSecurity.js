/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ezbakeBaseService_ttypes = require('./ezbakeBaseService_types')
var ezbakeBaseTypes_ttypes = require('./ezbakeBaseTypes_types')


var EzBakeBaseService = require('./EzBakeBaseService')
var EzBakeBaseServiceClient = EzBakeBaseService.Client
var EzBakeBaseServiceProcessor = EzBakeBaseService.Processor
var ttypes = require('./ezsecurity_types');
//HELPER FUNCTIONS AND STRUCTURES

ezsecurity.EzSecurity_requestProxyToken_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ezsecurity.EzSecurity_requestProxyToken_args.prototype = {};
ezsecurity.EzSecurity_requestProxyToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.ProxyTokenRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_requestProxyToken_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_requestProxyToken_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_requestProxyToken_result = function(args) {
  this.success = null;
  this.ezSecurityTokenException = null;
  this.userNotFound = null;
  if (args instanceof ezbakeBaseTypes_ttypes.EzSecurityTokenException) {
    this.ezSecurityTokenException = args;
    return;
  }
  if (args instanceof ttypes.UserNotFoundException) {
    this.userNotFound = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ezSecurityTokenException !== undefined) {
      this.ezSecurityTokenException = args.ezSecurityTokenException;
    }
    if (args.userNotFound !== undefined) {
      this.userNotFound = args.userNotFound;
    }
  }
};
ezsecurity.EzSecurity_requestProxyToken_result.prototype = {};
ezsecurity.EzSecurity_requestProxyToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProxyTokenResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezSecurityTokenException = new ezbakeBaseTypes_ttypes.EzSecurityTokenException();
        this.ezSecurityTokenException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userNotFound = new ttypes.UserNotFoundException();
        this.userNotFound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_requestProxyToken_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_requestProxyToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ezSecurityTokenException !== null && this.ezSecurityTokenException !== undefined) {
    output.writeFieldBegin('ezSecurityTokenException', Thrift.Type.STRUCT, 1);
    this.ezSecurityTokenException.write(output);
    output.writeFieldEnd();
  }
  if (this.userNotFound !== null && this.userNotFound !== undefined) {
    output.writeFieldBegin('userNotFound', Thrift.Type.STRUCT, 2);
    this.userNotFound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_requestToken_args = function(args) {
  this.request = null;
  this.signature = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
  }
};
ezsecurity.EzSecurity_requestToken_args.prototype = {};
ezsecurity.EzSecurity_requestToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ezbakeBaseTypes_ttypes.TokenRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_requestToken_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_requestToken_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 2);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_requestToken_result = function(args) {
  this.success = null;
  this.ezSecurityTokenException = null;
  this.appNotRegistered = null;
  if (args instanceof ezbakeBaseTypes_ttypes.EzSecurityTokenException) {
    this.ezSecurityTokenException = args;
    return;
  }
  if (args instanceof ttypes.AppNotRegisteredException) {
    this.appNotRegistered = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ezSecurityTokenException !== undefined) {
      this.ezSecurityTokenException = args.ezSecurityTokenException;
    }
    if (args.appNotRegistered !== undefined) {
      this.appNotRegistered = args.appNotRegistered;
    }
  }
};
ezsecurity.EzSecurity_requestToken_result.prototype = {};
ezsecurity.EzSecurity_requestToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezSecurityTokenException = new ezbakeBaseTypes_ttypes.EzSecurityTokenException();
        this.ezSecurityTokenException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.appNotRegistered = new ttypes.AppNotRegisteredException();
        this.appNotRegistered.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_requestToken_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_requestToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ezSecurityTokenException !== null && this.ezSecurityTokenException !== undefined) {
    output.writeFieldBegin('ezSecurityTokenException', Thrift.Type.STRUCT, 1);
    this.ezSecurityTokenException.write(output);
    output.writeFieldEnd();
  }
  if (this.appNotRegistered !== null && this.appNotRegistered !== undefined) {
    output.writeFieldBegin('appNotRegistered', Thrift.Type.STRUCT, 2);
    this.appNotRegistered.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_refreshToken_args = function(args) {
  this.request = null;
  this.signature = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
  }
};
ezsecurity.EzSecurity_refreshToken_args.prototype = {};
ezsecurity.EzSecurity_refreshToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ezbakeBaseTypes_ttypes.TokenRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_refreshToken_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_refreshToken_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 2);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_refreshToken_result = function(args) {
  this.success = null;
  this.ezSecurityTokenException = null;
  this.appNotRegistered = null;
  if (args instanceof ezbakeBaseTypes_ttypes.EzSecurityTokenException) {
    this.ezSecurityTokenException = args;
    return;
  }
  if (args instanceof ttypes.AppNotRegisteredException) {
    this.appNotRegistered = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ezSecurityTokenException !== undefined) {
      this.ezSecurityTokenException = args.ezSecurityTokenException;
    }
    if (args.appNotRegistered !== undefined) {
      this.appNotRegistered = args.appNotRegistered;
    }
  }
};
ezsecurity.EzSecurity_refreshToken_result.prototype = {};
ezsecurity.EzSecurity_refreshToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezSecurityTokenException = new ezbakeBaseTypes_ttypes.EzSecurityTokenException();
        this.ezSecurityTokenException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.appNotRegistered = new ttypes.AppNotRegisteredException();
        this.appNotRegistered.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_refreshToken_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_refreshToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ezSecurityTokenException !== null && this.ezSecurityTokenException !== undefined) {
    output.writeFieldBegin('ezSecurityTokenException', Thrift.Type.STRUCT, 1);
    this.ezSecurityTokenException.write(output);
    output.writeFieldEnd();
  }
  if (this.appNotRegistered !== null && this.appNotRegistered !== undefined) {
    output.writeFieldBegin('appNotRegistered', Thrift.Type.STRUCT, 2);
    this.appNotRegistered.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_isUserInvalid_args = function(args) {
  this.ezSecurityToken = null;
  this.userId = null;
  if (args) {
    if (args.ezSecurityToken !== undefined) {
      this.ezSecurityToken = args.ezSecurityToken;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
ezsecurity.EzSecurity_isUserInvalid_args.prototype = {};
ezsecurity.EzSecurity_isUserInvalid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezSecurityToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezSecurityToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_isUserInvalid_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_isUserInvalid_args');
  if (this.ezSecurityToken !== null && this.ezSecurityToken !== undefined) {
    output.writeFieldBegin('ezSecurityToken', Thrift.Type.STRUCT, 1);
    this.ezSecurityToken.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_isUserInvalid_result = function(args) {
  this.success = null;
  this.tokenException = null;
  if (args instanceof ezbakeBaseTypes_ttypes.EzSecurityTokenException) {
    this.tokenException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.tokenException !== undefined) {
      this.tokenException = args.tokenException;
    }
  }
};
ezsecurity.EzSecurity_isUserInvalid_result.prototype = {};
ezsecurity.EzSecurity_isUserInvalid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokenException = new ezbakeBaseTypes_ttypes.EzSecurityTokenException();
        this.tokenException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_isUserInvalid_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_isUserInvalid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.tokenException !== null && this.tokenException !== undefined) {
    output.writeFieldBegin('tokenException', Thrift.Type.STRUCT, 1);
    this.tokenException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_requestUserInfoAsJson_args = function(args) {
  this.request = null;
  this.signature = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
  }
};
ezsecurity.EzSecurity_requestUserInfoAsJson_args.prototype = {};
ezsecurity.EzSecurity_requestUserInfoAsJson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ezbakeBaseTypes_ttypes.TokenRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_requestUserInfoAsJson_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_requestUserInfoAsJson_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 2);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_requestUserInfoAsJson_result = function(args) {
  this.success = null;
  this.ezSecurityTokenException = null;
  if (args instanceof ezbakeBaseTypes_ttypes.EzSecurityTokenException) {
    this.ezSecurityTokenException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ezSecurityTokenException !== undefined) {
      this.ezSecurityTokenException = args.ezSecurityTokenException;
    }
  }
};
ezsecurity.EzSecurity_requestUserInfoAsJson_result.prototype = {};
ezsecurity.EzSecurity_requestUserInfoAsJson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ezbakeBaseTypes_ttypes.EzSecurityTokenJson();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezSecurityTokenException = new ezbakeBaseTypes_ttypes.EzSecurityTokenException();
        this.ezSecurityTokenException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_requestUserInfoAsJson_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_requestUserInfoAsJson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ezSecurityTokenException !== null && this.ezSecurityTokenException !== undefined) {
    output.writeFieldBegin('ezSecurityTokenException', Thrift.Type.STRUCT, 1);
    this.ezSecurityTokenException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_updateEzAdmins_args = function(args) {
  this.ezAdmins = null;
  if (args) {
    if (args.ezAdmins !== undefined) {
      this.ezAdmins = args.ezAdmins;
    }
  }
};
ezsecurity.EzSecurity_updateEzAdmins_args.prototype = {};
ezsecurity.EzSecurity_updateEzAdmins_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.ezAdmins = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.ezAdmins.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_updateEzAdmins_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_updateEzAdmins_args');
  if (this.ezAdmins !== null && this.ezAdmins !== undefined) {
    output.writeFieldBegin('ezAdmins', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.ezAdmins.length);
    for (var iter7 in this.ezAdmins)
    {
      if (this.ezAdmins.hasOwnProperty(iter7))
      {
        iter7 = this.ezAdmins[iter7];
        output.writeString(iter7);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_updateEzAdmins_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ezsecurity.EzSecurity_updateEzAdmins_result.prototype = {};
ezsecurity.EzSecurity_updateEzAdmins_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_updateEzAdmins_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_updateEzAdmins_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_invalidateCache_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ezsecurity.EzSecurity_invalidateCache_args.prototype = {};
ezsecurity.EzSecurity_invalidateCache_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_invalidateCache_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_invalidateCache_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurity_invalidateCache_result = function(args) {
  this.ezSecurityTokenException = null;
  if (args instanceof ezbakeBaseTypes_ttypes.EzSecurityTokenException) {
    this.ezSecurityTokenException = args;
    return;
  }
  if (args) {
    if (args.ezSecurityTokenException !== undefined) {
      this.ezSecurityTokenException = args.ezSecurityTokenException;
    }
  }
};
ezsecurity.EzSecurity_invalidateCache_result.prototype = {};
ezsecurity.EzSecurity_invalidateCache_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezSecurityTokenException = new ezbakeBaseTypes_ttypes.EzSecurityTokenException();
        this.ezSecurityTokenException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezsecurity.EzSecurity_invalidateCache_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurity_invalidateCache_result');
  if (this.ezSecurityTokenException !== null && this.ezSecurityTokenException !== undefined) {
    output.writeFieldBegin('ezSecurityTokenException', Thrift.Type.STRUCT, 1);
    this.ezSecurityTokenException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezsecurity.EzSecurityClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
Thrift.inherits(ezsecurity.EzSecurityClient, EzBakeBaseServiceClient)
ezsecurity.EzSecurityClient.prototype.requestProxyToken = function(request, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_requestProxyToken(request);
};

ezsecurity.EzSecurityClient.prototype.send_requestProxyToken = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestProxyToken', Thrift.MessageType.CALL, this.seqid);
  var args = new ezsecurity.EzSecurity_requestProxyToken_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ezsecurity.EzSecurityClient.prototype.recv_requestProxyToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ezsecurity.EzSecurity_requestProxyToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ezSecurityTokenException) {
    return callback(result.ezSecurityTokenException);
  }
  if (null !== result.userNotFound) {
    return callback(result.userNotFound);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('requestProxyToken failed: unknown result');
};
ezsecurity.EzSecurityClient.prototype.requestToken = function(request, signature, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_requestToken(request, signature);
};

ezsecurity.EzSecurityClient.prototype.send_requestToken = function(request, signature) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestToken', Thrift.MessageType.CALL, this.seqid);
  var args = new ezsecurity.EzSecurity_requestToken_args();
  args.request = request;
  args.signature = signature;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ezsecurity.EzSecurityClient.prototype.recv_requestToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ezsecurity.EzSecurity_requestToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ezSecurityTokenException) {
    return callback(result.ezSecurityTokenException);
  }
  if (null !== result.appNotRegistered) {
    return callback(result.appNotRegistered);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('requestToken failed: unknown result');
};
ezsecurity.EzSecurityClient.prototype.refreshToken = function(request, signature, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_refreshToken(request, signature);
};

ezsecurity.EzSecurityClient.prototype.send_refreshToken = function(request, signature) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('refreshToken', Thrift.MessageType.CALL, this.seqid);
  var args = new ezsecurity.EzSecurity_refreshToken_args();
  args.request = request;
  args.signature = signature;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ezsecurity.EzSecurityClient.prototype.recv_refreshToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ezsecurity.EzSecurity_refreshToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ezSecurityTokenException) {
    return callback(result.ezSecurityTokenException);
  }
  if (null !== result.appNotRegistered) {
    return callback(result.appNotRegistered);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('refreshToken failed: unknown result');
};
ezsecurity.EzSecurityClient.prototype.isUserInvalid = function(ezSecurityToken, userId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_isUserInvalid(ezSecurityToken, userId);
};

ezsecurity.EzSecurityClient.prototype.send_isUserInvalid = function(ezSecurityToken, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isUserInvalid', Thrift.MessageType.CALL, this.seqid);
  var args = new ezsecurity.EzSecurity_isUserInvalid_args();
  args.ezSecurityToken = ezSecurityToken;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ezsecurity.EzSecurityClient.prototype.recv_isUserInvalid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ezsecurity.EzSecurity_isUserInvalid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.tokenException) {
    return callback(result.tokenException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isUserInvalid failed: unknown result');
};
ezsecurity.EzSecurityClient.prototype.requestUserInfoAsJson = function(request, signature, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_requestUserInfoAsJson(request, signature);
};

ezsecurity.EzSecurityClient.prototype.send_requestUserInfoAsJson = function(request, signature) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestUserInfoAsJson', Thrift.MessageType.CALL, this.seqid);
  var args = new ezsecurity.EzSecurity_requestUserInfoAsJson_args();
  args.request = request;
  args.signature = signature;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ezsecurity.EzSecurityClient.prototype.recv_requestUserInfoAsJson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ezsecurity.EzSecurity_requestUserInfoAsJson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ezSecurityTokenException) {
    return callback(result.ezSecurityTokenException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('requestUserInfoAsJson failed: unknown result');
};
ezsecurity.EzSecurityClient.prototype.updateEzAdmins = function(ezAdmins, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_updateEzAdmins(ezAdmins);
};

ezsecurity.EzSecurityClient.prototype.send_updateEzAdmins = function(ezAdmins) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateEzAdmins', Thrift.MessageType.CALL, this.seqid);
  var args = new ezsecurity.EzSecurity_updateEzAdmins_args();
  args.ezAdmins = ezAdmins;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ezsecurity.EzSecurityClient.prototype.recv_updateEzAdmins = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ezsecurity.EzSecurity_updateEzAdmins_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateEzAdmins failed: unknown result');
};
ezsecurity.EzSecurityClient.prototype.invalidateCache = function(request, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_invalidateCache(request);
};

ezsecurity.EzSecurityClient.prototype.send_invalidateCache = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('invalidateCache', Thrift.MessageType.CALL, this.seqid);
  var args = new ezsecurity.EzSecurity_invalidateCache_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ezsecurity.EzSecurityClient.prototype.recv_invalidateCache = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ezsecurity.EzSecurity_invalidateCache_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ezSecurityTokenException) {
    return callback(result.ezSecurityTokenException);
  }
  callback(null)
};
ezsecurity.EzSecurityProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(ezsecurity.EzSecurityProcessor, EzBakeBaseServiceProcessor)
ezsecurity.EzSecurityProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ezsecurity.EzSecurityProcessor.prototype.process_requestProxyToken = function(seqid, input, output) {
  var args = new ezsecurity.EzSecurity_requestProxyToken_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.requestProxyToken(args.request, function (err, result) {
    var result = new ezsecurity.EzSecurity_requestProxyToken_result((err != null ? err : {success: result}));
    output.writeMessageBegin("requestProxyToken", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ezsecurity.EzSecurityProcessor.prototype.process_requestToken = function(seqid, input, output) {
  var args = new ezsecurity.EzSecurity_requestToken_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.requestToken(args.request, args.signature, function (err, result) {
    var result = new ezsecurity.EzSecurity_requestToken_result((err != null ? err : {success: result}));
    output.writeMessageBegin("requestToken", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ezsecurity.EzSecurityProcessor.prototype.process_refreshToken = function(seqid, input, output) {
  var args = new ezsecurity.EzSecurity_refreshToken_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.refreshToken(args.request, args.signature, function (err, result) {
    var result = new ezsecurity.EzSecurity_refreshToken_result((err != null ? err : {success: result}));
    output.writeMessageBegin("refreshToken", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ezsecurity.EzSecurityProcessor.prototype.process_isUserInvalid = function(seqid, input, output) {
  var args = new ezsecurity.EzSecurity_isUserInvalid_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.isUserInvalid(args.ezSecurityToken, args.userId, function (err, result) {
    var result = new ezsecurity.EzSecurity_isUserInvalid_result((err != null ? err : {success: result}));
    output.writeMessageBegin("isUserInvalid", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ezsecurity.EzSecurityProcessor.prototype.process_requestUserInfoAsJson = function(seqid, input, output) {
  var args = new ezsecurity.EzSecurity_requestUserInfoAsJson_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.requestUserInfoAsJson(args.request, args.signature, function (err, result) {
    var result = new ezsecurity.EzSecurity_requestUserInfoAsJson_result((err != null ? err : {success: result}));
    output.writeMessageBegin("requestUserInfoAsJson", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ezsecurity.EzSecurityProcessor.prototype.process_updateEzAdmins = function(seqid, input, output) {
  var args = new ezsecurity.EzSecurity_updateEzAdmins_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.updateEzAdmins(args.ezAdmins, function (err, result) {
    var result = new ezsecurity.EzSecurity_updateEzAdmins_result((err != null ? err : {success: result}));
    output.writeMessageBegin("updateEzAdmins", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ezsecurity.EzSecurityProcessor.prototype.process_invalidateCache = function(seqid, input, output) {
  var args = new ezsecurity.EzSecurity_invalidateCache_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.invalidateCache(args.request, function (err, result) {
    var result = new ezsecurity.EzSecurity_invalidateCache_result((err != null ? err : {success: result}));
    output.writeMessageBegin("invalidateCache", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

