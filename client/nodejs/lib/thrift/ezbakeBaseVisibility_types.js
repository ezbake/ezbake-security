/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
if (typeof ezbake === 'undefined') {
  ezbake = {};
}
if (typeof ezbake.base === 'undefined') {
  ezbake.base = {};
}
if (typeof ezbake.base.thrift === 'undefined') {
  ezbake.base.thrift = {};
}
ezbake.base.thrift.PlatformObjectVisibilities = module.exports.PlatformObjectVisibilities = function(args) {
  this.platformObjectReadVisibility = null;
  this.platformObjectDiscoverVisibility = null;
  this.platformObjectWriteVisibility = null;
  this.platformObjectManageVisibility = null;
  if (args) {
    if (args.platformObjectReadVisibility !== undefined) {
      this.platformObjectReadVisibility = args.platformObjectReadVisibility;
    }
    if (args.platformObjectDiscoverVisibility !== undefined) {
      this.platformObjectDiscoverVisibility = args.platformObjectDiscoverVisibility;
    }
    if (args.platformObjectWriteVisibility !== undefined) {
      this.platformObjectWriteVisibility = args.platformObjectWriteVisibility;
    }
    if (args.platformObjectManageVisibility !== undefined) {
      this.platformObjectManageVisibility = args.platformObjectManageVisibility;
    }
  }
};
ezbake.base.thrift.PlatformObjectVisibilities.prototype = {};
ezbake.base.thrift.PlatformObjectVisibilities.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.platformObjectReadVisibility = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI64();
          this.platformObjectReadVisibility.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size7 = 0;
        var _rtmp311;
        this.platformObjectDiscoverVisibility = [];
        var _etype10 = 0;
        _rtmp311 = input.readSetBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI64();
          this.platformObjectDiscoverVisibility.push(elem13);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size14 = 0;
        var _rtmp318;
        this.platformObjectWriteVisibility = [];
        var _etype17 = 0;
        _rtmp318 = input.readSetBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI64();
          this.platformObjectWriteVisibility.push(elem20);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size21 = 0;
        var _rtmp325;
        this.platformObjectManageVisibility = [];
        var _etype24 = 0;
        _rtmp325 = input.readSetBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = input.readI64();
          this.platformObjectManageVisibility.push(elem27);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.PlatformObjectVisibilities.prototype.write = function(output) {
  output.writeStructBegin('PlatformObjectVisibilities');
  if (this.platformObjectReadVisibility !== null && this.platformObjectReadVisibility !== undefined) {
    output.writeFieldBegin('platformObjectReadVisibility', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I64, this.platformObjectReadVisibility.length);
    for (var iter28 in this.platformObjectReadVisibility)
    {
      if (this.platformObjectReadVisibility.hasOwnProperty(iter28))
      {
        iter28 = this.platformObjectReadVisibility[iter28];
        output.writeI64(iter28);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.platformObjectDiscoverVisibility !== null && this.platformObjectDiscoverVisibility !== undefined) {
    output.writeFieldBegin('platformObjectDiscoverVisibility', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I64, this.platformObjectDiscoverVisibility.length);
    for (var iter29 in this.platformObjectDiscoverVisibility)
    {
      if (this.platformObjectDiscoverVisibility.hasOwnProperty(iter29))
      {
        iter29 = this.platformObjectDiscoverVisibility[iter29];
        output.writeI64(iter29);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.platformObjectWriteVisibility !== null && this.platformObjectWriteVisibility !== undefined) {
    output.writeFieldBegin('platformObjectWriteVisibility', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.I64, this.platformObjectWriteVisibility.length);
    for (var iter30 in this.platformObjectWriteVisibility)
    {
      if (this.platformObjectWriteVisibility.hasOwnProperty(iter30))
      {
        iter30 = this.platformObjectWriteVisibility[iter30];
        output.writeI64(iter30);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.platformObjectManageVisibility !== null && this.platformObjectManageVisibility !== undefined) {
    output.writeFieldBegin('platformObjectManageVisibility', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I64, this.platformObjectManageVisibility.length);
    for (var iter31 in this.platformObjectManageVisibility)
    {
      if (this.platformObjectManageVisibility.hasOwnProperty(iter31))
      {
        iter31 = this.platformObjectManageVisibility[iter31];
        output.writeI64(iter31);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.AdvancedMarkings = module.exports.AdvancedMarkings = function(args) {
  this.externalCommunityVisibility = null;
  this.platformObjectVisibility = null;
  this.id = null;
  this.composite = null;
  this.purgeIds = null;
  if (args) {
    if (args.externalCommunityVisibility !== undefined) {
      this.externalCommunityVisibility = args.externalCommunityVisibility;
    }
    if (args.platformObjectVisibility !== undefined) {
      this.platformObjectVisibility = args.platformObjectVisibility;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.composite !== undefined) {
      this.composite = args.composite;
    }
    if (args.purgeIds !== undefined) {
      this.purgeIds = args.purgeIds;
    }
  }
};
ezbake.base.thrift.AdvancedMarkings.prototype = {};
ezbake.base.thrift.AdvancedMarkings.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.externalCommunityVisibility = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformObjectVisibility = new ttypes.PlatformObjectVisibilities();
        this.platformObjectVisibility.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.composite = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size32 = 0;
        var _rtmp336;
        this.purgeIds = [];
        var _etype35 = 0;
        _rtmp336 = input.readSetBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI64();
          this.purgeIds.push(elem38);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.AdvancedMarkings.prototype.write = function(output) {
  output.writeStructBegin('AdvancedMarkings');
  if (this.externalCommunityVisibility !== null && this.externalCommunityVisibility !== undefined) {
    output.writeFieldBegin('externalCommunityVisibility', Thrift.Type.STRING, 1);
    output.writeString(this.externalCommunityVisibility);
    output.writeFieldEnd();
  }
  if (this.platformObjectVisibility !== null && this.platformObjectVisibility !== undefined) {
    output.writeFieldBegin('platformObjectVisibility', Thrift.Type.STRUCT, 2);
    this.platformObjectVisibility.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 3);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.composite !== null && this.composite !== undefined) {
    output.writeFieldBegin('composite', Thrift.Type.BOOL, 4);
    output.writeBool(this.composite);
    output.writeFieldEnd();
  }
  if (this.purgeIds !== null && this.purgeIds !== undefined) {
    output.writeFieldBegin('purgeIds', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.I64, this.purgeIds.length);
    for (var iter39 in this.purgeIds)
    {
      if (this.purgeIds.hasOwnProperty(iter39))
      {
        iter39 = this.purgeIds[iter39];
        output.writeI64(iter39);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.Visibility = module.exports.Visibility = function(args) {
  this.formalVisibility = null;
  this.advancedMarkings = null;
  if (args) {
    if (args.formalVisibility !== undefined) {
      this.formalVisibility = args.formalVisibility;
    }
    if (args.advancedMarkings !== undefined) {
      this.advancedMarkings = args.advancedMarkings;
    }
  }
};
ezbake.base.thrift.Visibility.prototype = {};
ezbake.base.thrift.Visibility.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.formalVisibility = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.advancedMarkings = new ttypes.AdvancedMarkings();
        this.advancedMarkings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.Visibility.prototype.write = function(output) {
  output.writeStructBegin('Visibility');
  if (this.formalVisibility !== null && this.formalVisibility !== undefined) {
    output.writeFieldBegin('formalVisibility', Thrift.Type.STRING, 1);
    output.writeString(this.formalVisibility);
    output.writeFieldEnd();
  }
  if (this.advancedMarkings !== null && this.advancedMarkings !== undefined) {
    output.writeFieldBegin('advancedMarkings', Thrift.Type.STRUCT, 2);
    this.advancedMarkings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

