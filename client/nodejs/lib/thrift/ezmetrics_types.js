/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
if (typeof ezbake === 'undefined') {
  ezbake = {};
}
if (typeof ezbake.base === 'undefined') {
  ezbake.base = {};
}
if (typeof ezbake.base.thrift === 'undefined') {
  ezbake.base.thrift = {};
}
if (typeof ezbake.base.thrift.metrics === 'undefined') {
  ezbake.base.thrift.metrics = {};
}
ezbake.base.thrift.metrics.GaugeThrift = module.exports.GaugeThrift = function(args) {
  this.value = null;
  this.error = null;
  if (args) {
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ezbake.base.thrift.metrics.GaugeThrift.prototype = {};
ezbake.base.thrift.metrics.GaugeThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.metrics.GaugeThrift.prototype.write = function(output) {
  output.writeStructBegin('GaugeThrift');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.metrics.CounterThrift = module.exports.CounterThrift = function(args) {
  this.count = null;
  if (args) {
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
ezbake.base.thrift.metrics.CounterThrift.prototype = {};
ezbake.base.thrift.metrics.CounterThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.metrics.CounterThrift.prototype.write = function(output) {
  output.writeStructBegin('CounterThrift');
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 1);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.metrics.SnapShotThrift = module.exports.SnapShotThrift = function(args) {
  this.max = null;
  this.min = null;
  this.mean = null;
  this.median = null;
  this.StdDev = null;
  this.p75 = null;
  this.p95 = null;
  this.p98 = null;
  this.p99 = null;
  this.p999 = null;
  this.values = null;
  if (args) {
    if (args.max !== undefined) {
      this.max = args.max;
    }
    if (args.min !== undefined) {
      this.min = args.min;
    }
    if (args.mean !== undefined) {
      this.mean = args.mean;
    }
    if (args.median !== undefined) {
      this.median = args.median;
    }
    if (args.StdDev !== undefined) {
      this.StdDev = args.StdDev;
    }
    if (args.p75 !== undefined) {
      this.p75 = args.p75;
    }
    if (args.p95 !== undefined) {
      this.p95 = args.p95;
    }
    if (args.p98 !== undefined) {
      this.p98 = args.p98;
    }
    if (args.p99 !== undefined) {
      this.p99 = args.p99;
    }
    if (args.p999 !== undefined) {
      this.p999 = args.p999;
    }
    if (args.values !== undefined) {
      this.values = args.values;
    }
  }
};
ezbake.base.thrift.metrics.SnapShotThrift.prototype = {};
ezbake.base.thrift.metrics.SnapShotThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.max = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.min = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.mean = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.median = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.StdDev = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.p75 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.p95 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.p98 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.p99 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.p999 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.values = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI64();
          this.values.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.metrics.SnapShotThrift.prototype.write = function(output) {
  output.writeStructBegin('SnapShotThrift');
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I64, 1);
    output.writeI64(this.max);
    output.writeFieldEnd();
  }
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.I64, 2);
    output.writeI64(this.min);
    output.writeFieldEnd();
  }
  if (this.mean !== null && this.mean !== undefined) {
    output.writeFieldBegin('mean', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.mean);
    output.writeFieldEnd();
  }
  if (this.median !== null && this.median !== undefined) {
    output.writeFieldBegin('median', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.median);
    output.writeFieldEnd();
  }
  if (this.StdDev !== null && this.StdDev !== undefined) {
    output.writeFieldBegin('StdDev', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.StdDev);
    output.writeFieldEnd();
  }
  if (this.p75 !== null && this.p75 !== undefined) {
    output.writeFieldBegin('p75', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.p75);
    output.writeFieldEnd();
  }
  if (this.p95 !== null && this.p95 !== undefined) {
    output.writeFieldBegin('p95', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.p95);
    output.writeFieldEnd();
  }
  if (this.p98 !== null && this.p98 !== undefined) {
    output.writeFieldBegin('p98', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.p98);
    output.writeFieldEnd();
  }
  if (this.p99 !== null && this.p99 !== undefined) {
    output.writeFieldBegin('p99', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.p99);
    output.writeFieldEnd();
  }
  if (this.p999 !== null && this.p999 !== undefined) {
    output.writeFieldBegin('p999', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.p999);
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.I64, this.values.length);
    for (var iter7 in this.values)
    {
      if (this.values.hasOwnProperty(iter7))
      {
        iter7 = this.values[iter7];
        output.writeI64(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.metrics.HistogramThrift = module.exports.HistogramThrift = function(args) {
  this.count = null;
  this.snapshot = null;
  if (args) {
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.snapshot !== undefined) {
      this.snapshot = args.snapshot;
    }
  }
};
ezbake.base.thrift.metrics.HistogramThrift.prototype = {};
ezbake.base.thrift.metrics.HistogramThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.snapshot = new ttypes.SnapShotThrift();
        this.snapshot.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.metrics.HistogramThrift.prototype.write = function(output) {
  output.writeStructBegin('HistogramThrift');
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 1);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  if (this.snapshot !== null && this.snapshot !== undefined) {
    output.writeFieldBegin('snapshot', Thrift.Type.STRUCT, 2);
    this.snapshot.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.metrics.MeteredThrift = module.exports.MeteredThrift = function(args) {
  this.count = null;
  this.m15Rate = null;
  this.m5Rate = null;
  this.m1Rate = null;
  this.meanRate = null;
  if (args) {
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.m15Rate !== undefined) {
      this.m15Rate = args.m15Rate;
    }
    if (args.m5Rate !== undefined) {
      this.m5Rate = args.m5Rate;
    }
    if (args.m1Rate !== undefined) {
      this.m1Rate = args.m1Rate;
    }
    if (args.meanRate !== undefined) {
      this.meanRate = args.meanRate;
    }
  }
};
ezbake.base.thrift.metrics.MeteredThrift.prototype = {};
ezbake.base.thrift.metrics.MeteredThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.m15Rate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.m5Rate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.m1Rate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.meanRate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.metrics.MeteredThrift.prototype.write = function(output) {
  output.writeStructBegin('MeteredThrift');
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 1);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  if (this.m15Rate !== null && this.m15Rate !== undefined) {
    output.writeFieldBegin('m15Rate', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.m15Rate);
    output.writeFieldEnd();
  }
  if (this.m5Rate !== null && this.m5Rate !== undefined) {
    output.writeFieldBegin('m5Rate', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.m5Rate);
    output.writeFieldEnd();
  }
  if (this.m1Rate !== null && this.m1Rate !== undefined) {
    output.writeFieldBegin('m1Rate', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.m1Rate);
    output.writeFieldEnd();
  }
  if (this.meanRate !== null && this.meanRate !== undefined) {
    output.writeFieldBegin('meanRate', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.meanRate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.metrics.TimerThrift = module.exports.TimerThrift = function(args) {
  this.count = null;
  this.snapshot = null;
  this.meter = null;
  if (args) {
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.snapshot !== undefined) {
      this.snapshot = args.snapshot;
    }
    if (args.meter !== undefined) {
      this.meter = args.meter;
    }
  }
};
ezbake.base.thrift.metrics.TimerThrift.prototype = {};
ezbake.base.thrift.metrics.TimerThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.snapshot = new ttypes.SnapShotThrift();
        this.snapshot.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meter = new ttypes.MeteredThrift();
        this.meter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.metrics.TimerThrift.prototype.write = function(output) {
  output.writeStructBegin('TimerThrift');
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 1);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  if (this.snapshot !== null && this.snapshot !== undefined) {
    output.writeFieldBegin('snapshot', Thrift.Type.STRUCT, 2);
    this.snapshot.write(output);
    output.writeFieldEnd();
  }
  if (this.meter !== null && this.meter !== undefined) {
    output.writeFieldBegin('meter', Thrift.Type.STRUCT, 3);
    this.meter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.metrics.MetricRegistryThrift = module.exports.MetricRegistryThrift = function(args) {
  this.gauges = null;
  this.counters = null;
  this.histograms = null;
  this.meters = null;
  this.timers = null;
  if (args) {
    if (args.gauges !== undefined) {
      this.gauges = args.gauges;
    }
    if (args.counters !== undefined) {
      this.counters = args.counters;
    }
    if (args.histograms !== undefined) {
      this.histograms = args.histograms;
    }
    if (args.meters !== undefined) {
      this.meters = args.meters;
    }
    if (args.timers !== undefined) {
      this.timers = args.timers;
    }
  }
};
ezbake.base.thrift.metrics.MetricRegistryThrift.prototype = {};
ezbake.base.thrift.metrics.MetricRegistryThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.gauges = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = new ttypes.GaugeThrift();
          val15.read(input);
          this.gauges[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size16 = 0;
        var _rtmp320;
        this.counters = {};
        var _ktype17 = 0;
        var _vtype18 = 0;
        _rtmp320 = input.readMapBegin();
        _ktype17 = _rtmp320.ktype;
        _vtype18 = _rtmp320.vtype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var key22 = null;
          var val23 = null;
          key22 = input.readString();
          val23 = new ttypes.CounterThrift();
          val23.read(input);
          this.counters[key22] = val23;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.histograms = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var key30 = null;
          var val31 = null;
          key30 = input.readString();
          val31 = new ttypes.HistogramThrift();
          val31.read(input);
          this.histograms[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size32 = 0;
        var _rtmp336;
        this.meters = {};
        var _ktype33 = 0;
        var _vtype34 = 0;
        _rtmp336 = input.readMapBegin();
        _ktype33 = _rtmp336.ktype;
        _vtype34 = _rtmp336.vtype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var key38 = null;
          var val39 = null;
          key38 = input.readString();
          val39 = new ttypes.MeteredThrift();
          val39.read(input);
          this.meters[key38] = val39;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size40 = 0;
        var _rtmp344;
        this.timers = {};
        var _ktype41 = 0;
        var _vtype42 = 0;
        _rtmp344 = input.readMapBegin();
        _ktype41 = _rtmp344.ktype;
        _vtype42 = _rtmp344.vtype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var key46 = null;
          var val47 = null;
          key46 = input.readString();
          val47 = new ttypes.TimerThrift();
          val47.read(input);
          this.timers[key46] = val47;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.metrics.MetricRegistryThrift.prototype.write = function(output) {
  output.writeStructBegin('MetricRegistryThrift');
  if (this.gauges !== null && this.gauges !== undefined) {
    output.writeFieldBegin('gauges', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.gauges));
    for (var kiter48 in this.gauges)
    {
      if (this.gauges.hasOwnProperty(kiter48))
      {
        var viter49 = this.gauges[kiter48];
        output.writeString(kiter48);
        viter49.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.counters !== null && this.counters !== undefined) {
    output.writeFieldBegin('counters', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.counters));
    for (var kiter50 in this.counters)
    {
      if (this.counters.hasOwnProperty(kiter50))
      {
        var viter51 = this.counters[kiter50];
        output.writeString(kiter50);
        viter51.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.histograms !== null && this.histograms !== undefined) {
    output.writeFieldBegin('histograms', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.histograms));
    for (var kiter52 in this.histograms)
    {
      if (this.histograms.hasOwnProperty(kiter52))
      {
        var viter53 = this.histograms[kiter52];
        output.writeString(kiter52);
        viter53.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.meters !== null && this.meters !== undefined) {
    output.writeFieldBegin('meters', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.meters));
    for (var kiter54 in this.meters)
    {
      if (this.meters.hasOwnProperty(kiter54))
      {
        var viter55 = this.meters[kiter54];
        output.writeString(kiter54);
        viter55.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.timers !== null && this.timers !== undefined) {
    output.writeFieldBegin('timers', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.timers));
    for (var kiter56 in this.timers)
    {
      if (this.timers.hasOwnProperty(kiter56))
      {
        var viter57 = this.timers[kiter56];
        output.writeString(kiter56);
        viter57.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

