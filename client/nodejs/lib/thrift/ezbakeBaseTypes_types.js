/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ezbakeBaseAuthorizations_ttypes = require('./ezbakeBaseAuthorizations_types')
var ezbakeBaseVisibility_ttypes = require('./ezbakeBaseVisibility_types')


var ttypes = module.exports = {};
if (typeof ezbake === 'undefined') {
  ezbake = {};
}
if (typeof ezbake.base === 'undefined') {
  ezbake.base = {};
}
if (typeof ezbake.base.thrift === 'undefined') {
  ezbake.base.thrift = {};
}
ttypes.TokenType = {
'USER' : 0,
'APP' : 1
};
ttypes.EzSecurityTokenExceptionType = {
'EXPIRED' : 0,
'INVALID_SIGNATURE' : 1,
'INVALID_SECURITY_ID' : 2
};
ezbake.base.thrift.TimeZone = module.exports.TimeZone = function(args) {
  this.hour = null;
  this.minute = null;
  this.afterUTC = null;
  if (args) {
    if (args.hour !== undefined) {
      this.hour = args.hour;
    }
    if (args.minute !== undefined) {
      this.minute = args.minute;
    }
    if (args.afterUTC !== undefined) {
      this.afterUTC = args.afterUTC;
    }
  }
};
ezbake.base.thrift.TimeZone.prototype = {};
ezbake.base.thrift.TimeZone.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.hour = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.minute = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.afterUTC = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.TimeZone.prototype.write = function(output) {
  output.writeStructBegin('TimeZone');
  if (this.hour !== null && this.hour !== undefined) {
    output.writeFieldBegin('hour', Thrift.Type.I16, 1);
    output.writeI16(this.hour);
    output.writeFieldEnd();
  }
  if (this.minute !== null && this.minute !== undefined) {
    output.writeFieldBegin('minute', Thrift.Type.I16, 2);
    output.writeI16(this.minute);
    output.writeFieldEnd();
  }
  if (this.afterUTC !== null && this.afterUTC !== undefined) {
    output.writeFieldBegin('afterUTC', Thrift.Type.BOOL, 3);
    output.writeBool(this.afterUTC);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.Time = module.exports.Time = function(args) {
  this.hour = null;
  this.minute = null;
  this.second = null;
  this.millisecond = null;
  this.tz = null;
  if (args) {
    if (args.hour !== undefined) {
      this.hour = args.hour;
    }
    if (args.minute !== undefined) {
      this.minute = args.minute;
    }
    if (args.second !== undefined) {
      this.second = args.second;
    }
    if (args.millisecond !== undefined) {
      this.millisecond = args.millisecond;
    }
    if (args.tz !== undefined) {
      this.tz = args.tz;
    }
  }
};
ezbake.base.thrift.Time.prototype = {};
ezbake.base.thrift.Time.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.hour = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.minute = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.second = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.millisecond = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tz = new ttypes.TimeZone();
        this.tz.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.Time.prototype.write = function(output) {
  output.writeStructBegin('Time');
  if (this.hour !== null && this.hour !== undefined) {
    output.writeFieldBegin('hour', Thrift.Type.I16, 1);
    output.writeI16(this.hour);
    output.writeFieldEnd();
  }
  if (this.minute !== null && this.minute !== undefined) {
    output.writeFieldBegin('minute', Thrift.Type.I16, 2);
    output.writeI16(this.minute);
    output.writeFieldEnd();
  }
  if (this.second !== null && this.second !== undefined) {
    output.writeFieldBegin('second', Thrift.Type.I16, 3);
    output.writeI16(this.second);
    output.writeFieldEnd();
  }
  if (this.millisecond !== null && this.millisecond !== undefined) {
    output.writeFieldBegin('millisecond', Thrift.Type.I16, 4);
    output.writeI16(this.millisecond);
    output.writeFieldEnd();
  }
  if (this.tz !== null && this.tz !== undefined) {
    output.writeFieldBegin('tz', Thrift.Type.STRUCT, 5);
    this.tz.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.Date = module.exports.Date = function(args) {
  this.month = null;
  this.day = null;
  this.year = null;
  if (args) {
    if (args.month !== undefined) {
      this.month = args.month;
    }
    if (args.day !== undefined) {
      this.day = args.day;
    }
    if (args.year !== undefined) {
      this.year = args.year;
    }
  }
};
ezbake.base.thrift.Date.prototype = {};
ezbake.base.thrift.Date.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.month = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.day = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.year = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.Date.prototype.write = function(output) {
  output.writeStructBegin('Date');
  if (this.month !== null && this.month !== undefined) {
    output.writeFieldBegin('month', Thrift.Type.I16, 1);
    output.writeI16(this.month);
    output.writeFieldEnd();
  }
  if (this.day !== null && this.day !== undefined) {
    output.writeFieldBegin('day', Thrift.Type.I16, 2);
    output.writeI16(this.day);
    output.writeFieldEnd();
  }
  if (this.year !== null && this.year !== undefined) {
    output.writeFieldBegin('year', Thrift.Type.I16, 3);
    output.writeI16(this.year);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.DateTime = module.exports.DateTime = function(args) {
  this.date = null;
  this.time = null;
  if (args) {
    if (args.date !== undefined) {
      this.date = args.date;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
  }
};
ezbake.base.thrift.DateTime.prototype = {};
ezbake.base.thrift.DateTime.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.date = new ttypes.Date();
        this.date.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.time = new ttypes.Time();
        this.time.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.DateTime.prototype.write = function(output) {
  output.writeStructBegin('DateTime');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRUCT, 1);
    this.date.write(output);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRUCT, 2);
    this.time.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.Coordinate = module.exports.Coordinate = function(args) {
  this.latitude = null;
  this.longitude = null;
  if (args) {
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
  }
};
ezbake.base.thrift.Coordinate.prototype = {};
ezbake.base.thrift.Coordinate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.Coordinate.prototype.write = function(output) {
  output.writeStructBegin('Coordinate');
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.Preview = module.exports.Preview = function(args) {
  this.mimetype = null;
  this.content = null;
  if (args) {
    if (args.mimetype !== undefined) {
      this.mimetype = args.mimetype;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
ezbake.base.thrift.Preview.prototype = {};
ezbake.base.thrift.Preview.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mimetype = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.Preview.prototype.write = function(output) {
  output.writeStructBegin('Preview');
  if (this.mimetype !== null && this.mimetype !== undefined) {
    output.writeFieldBegin('mimetype', Thrift.Type.STRING, 1);
    output.writeString(this.mimetype);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.DocumentClassification = module.exports.DocumentClassification = function(args) {
  this.classification = null;
  if (args) {
    if (args.classification !== undefined) {
      this.classification = args.classification;
    }
  }
};
ezbake.base.thrift.DocumentClassification.prototype = {};
ezbake.base.thrift.DocumentClassification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.classification = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.DocumentClassification.prototype.write = function(output) {
  output.writeStructBegin('DocumentClassification');
  if (this.classification !== null && this.classification !== undefined) {
    output.writeFieldBegin('classification', Thrift.Type.STRING, 1);
    output.writeString(this.classification);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.EnterpriseMetaData = module.exports.EnterpriseMetaData = function(args) {
  this.tags = null;
  if (args) {
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
  }
};
ezbake.base.thrift.EnterpriseMetaData.prototype = {};
ezbake.base.thrift.EnterpriseMetaData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.tags = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.tags[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.EnterpriseMetaData.prototype.write = function(output) {
  output.writeStructBegin('EnterpriseMetaData');
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tags));
    for (var kiter8 in this.tags)
    {
      if (this.tags.hasOwnProperty(kiter8))
      {
        var viter9 = this.tags[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.SSR = module.exports.SSR = function(args) {
  this.uri = null;
  this.visibility = null;
  this.title = null;
  this.snippet = null;
  this.resultDate = null;
  this.coordinate = null;
  this.preview = null;
  this.metaData = null;
  if (args) {
    if (args.uri !== undefined) {
      this.uri = args.uri;
    }
    if (args.visibility !== undefined) {
      this.visibility = args.visibility;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.snippet !== undefined) {
      this.snippet = args.snippet;
    }
    if (args.resultDate !== undefined) {
      this.resultDate = args.resultDate;
    }
    if (args.coordinate !== undefined) {
      this.coordinate = args.coordinate;
    }
    if (args.preview !== undefined) {
      this.preview = args.preview;
    }
    if (args.metaData !== undefined) {
      this.metaData = args.metaData;
    }
  }
};
ezbake.base.thrift.SSR.prototype = {};
ezbake.base.thrift.SSR.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.visibility = new ezbakeBaseVisibility_ttypes.Visibility();
        this.visibility.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.snippet = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultDate = new ttypes.DateTime();
        this.resultDate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.coordinate = new ttypes.Coordinate();
        this.coordinate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.preview = new ttypes.Preview();
        this.preview.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaData = new ttypes.EnterpriseMetaData();
        this.metaData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.SSR.prototype.write = function(output) {
  output.writeStructBegin('SSR');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.visibility !== null && this.visibility !== undefined) {
    output.writeFieldBegin('visibility', Thrift.Type.STRUCT, 2);
    this.visibility.write(output);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 3);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.snippet !== null && this.snippet !== undefined) {
    output.writeFieldBegin('snippet', Thrift.Type.STRING, 4);
    output.writeString(this.snippet);
    output.writeFieldEnd();
  }
  if (this.resultDate !== null && this.resultDate !== undefined) {
    output.writeFieldBegin('resultDate', Thrift.Type.STRUCT, 5);
    this.resultDate.write(output);
    output.writeFieldEnd();
  }
  if (this.coordinate !== null && this.coordinate !== undefined) {
    output.writeFieldBegin('coordinate', Thrift.Type.STRUCT, 6);
    this.coordinate.write(output);
    output.writeFieldEnd();
  }
  if (this.preview !== null && this.preview !== undefined) {
    output.writeFieldBegin('preview', Thrift.Type.STRUCT, 7);
    this.preview.write(output);
    output.writeFieldEnd();
  }
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.STRUCT, 8);
    this.metaData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.UserInfo = module.exports.UserInfo = function(args) {
  this.principal = null;
  this.id = null;
  this.firstName = null;
  this.lastName = null;
  this.name = null;
  this.citizenship = null;
  this.emails = null;
  this.phoneNumbers = null;
  this.company = null;
  this.organization = null;
  if (args) {
    if (args.principal !== undefined) {
      this.principal = args.principal;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.firstName !== undefined) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined) {
      this.lastName = args.lastName;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.citizenship !== undefined) {
      this.citizenship = args.citizenship;
    }
    if (args.emails !== undefined) {
      this.emails = args.emails;
    }
    if (args.phoneNumbers !== undefined) {
      this.phoneNumbers = args.phoneNumbers;
    }
    if (args.company !== undefined) {
      this.company = args.company;
    }
    if (args.organization !== undefined) {
      this.organization = args.organization;
    }
  }
};
ezbake.base.thrift.UserInfo.prototype = {};
ezbake.base.thrift.UserInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.citizenship = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.emails = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var key16 = null;
          var val17 = null;
          key16 = input.readString();
          val17 = input.readString();
          this.emails[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.phoneNumbers = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var key24 = null;
          var val25 = null;
          key24 = input.readString();
          val25 = input.readString();
          this.phoneNumbers[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.UserInfo.prototype.write = function(output) {
  output.writeStructBegin('UserInfo');
  if (this.principal !== null && this.principal !== undefined) {
    output.writeFieldBegin('principal', Thrift.Type.STRING, 1);
    output.writeString(this.principal);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 3);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 4);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.citizenship !== null && this.citizenship !== undefined) {
    output.writeFieldBegin('citizenship', Thrift.Type.STRING, 6);
    output.writeString(this.citizenship);
    output.writeFieldEnd();
  }
  if (this.emails !== null && this.emails !== undefined) {
    output.writeFieldBegin('emails', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.emails));
    for (var kiter26 in this.emails)
    {
      if (this.emails.hasOwnProperty(kiter26))
      {
        var viter27 = this.emails[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.phoneNumbers !== null && this.phoneNumbers !== undefined) {
    output.writeFieldBegin('phoneNumbers', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.phoneNumbers));
    for (var kiter28 in this.phoneNumbers)
    {
      if (this.phoneNumbers.hasOwnProperty(kiter28))
      {
        var viter29 = this.phoneNumbers[kiter28];
        output.writeString(kiter28);
        output.writeString(viter29);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 9);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 10);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.AppInfo = module.exports.AppInfo = function(args) {
  this.securityId = null;
  this.principal = null;
  if (args) {
    if (args.securityId !== undefined) {
      this.securityId = args.securityId;
    }
    if (args.principal !== undefined) {
      this.principal = args.principal;
    }
  }
};
ezbake.base.thrift.AppInfo.prototype = {};
ezbake.base.thrift.AppInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.securityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principal = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.AppInfo.prototype.write = function(output) {
  output.writeStructBegin('AppInfo');
  if (this.securityId !== null && this.securityId !== undefined) {
    output.writeFieldBegin('securityId', Thrift.Type.STRING, 1);
    output.writeString(this.securityId);
    output.writeFieldEnd();
  }
  if (this.principal !== null && this.principal !== undefined) {
    output.writeFieldBegin('principal', Thrift.Type.STRING, 2);
    output.writeString(this.principal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.CommunityMembership = module.exports.CommunityMembership = function(args) {
  this.name = null;
  this.type = null;
  this.organization = null;
  this.groups = null;
  this.regions = null;
  this.topics = null;
  this.flags = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.organization !== undefined) {
      this.organization = args.organization;
    }
    if (args.groups !== undefined) {
      this.groups = args.groups;
    }
    if (args.regions !== undefined) {
      this.regions = args.regions;
    }
    if (args.topics !== undefined) {
      this.topics = args.topics;
    }
    if (args.flags !== undefined) {
      this.flags = args.flags;
    }
  }
};
ezbake.base.thrift.CommunityMembership.prototype = {};
ezbake.base.thrift.CommunityMembership.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.groups = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = input.readString();
          this.groups.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size37 = 0;
        var _rtmp341;
        this.regions = [];
        var _etype40 = 0;
        _rtmp341 = input.readListBegin();
        _etype40 = _rtmp341.etype;
        _size37 = _rtmp341.size;
        for (var _i42 = 0; _i42 < _size37; ++_i42)
        {
          var elem43 = null;
          elem43 = input.readString();
          this.regions.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.topics = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = input.readString();
          this.topics.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size51 = 0;
        var _rtmp355;
        this.flags = {};
        var _ktype52 = 0;
        var _vtype53 = 0;
        _rtmp355 = input.readMapBegin();
        _ktype52 = _rtmp355.ktype;
        _vtype53 = _rtmp355.vtype;
        _size51 = _rtmp355.size;
        for (var _i56 = 0; _i56 < _size51; ++_i56)
        {
          var key57 = null;
          var val58 = null;
          key57 = input.readString();
          val58 = input.readBool();
          this.flags[key57] = val58;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.CommunityMembership.prototype.write = function(output) {
  output.writeStructBegin('CommunityMembership');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 3);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter59 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter59))
      {
        iter59 = this.groups[iter59];
        output.writeString(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.regions !== null && this.regions !== undefined) {
    output.writeFieldBegin('regions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.regions.length);
    for (var iter60 in this.regions)
    {
      if (this.regions.hasOwnProperty(iter60))
      {
        iter60 = this.regions[iter60];
        output.writeString(iter60);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.topics !== null && this.topics !== undefined) {
    output.writeFieldBegin('topics', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.topics.length);
    for (var iter61 in this.topics)
    {
      if (this.topics.hasOwnProperty(iter61))
      {
        iter61 = this.topics[iter61];
        output.writeString(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BOOL, Thrift.objectLength(this.flags));
    for (var kiter62 in this.flags)
    {
      if (this.flags.hasOwnProperty(kiter62))
      {
        var viter63 = this.flags[kiter62];
        output.writeString(kiter62);
        output.writeBool(viter63);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.ValidityCaveats = module.exports.ValidityCaveats = function(args) {
  this.issuer = null;
  this.issuedTo = null;
  this.issuedFor = null;
  this.issuedTime = null;
  this.notBefore = null;
  this.notAfter = null;
  this.signature = null;
  if (args) {
    if (args.issuer !== undefined) {
      this.issuer = args.issuer;
    }
    if (args.issuedTo !== undefined) {
      this.issuedTo = args.issuedTo;
    }
    if (args.issuedFor !== undefined) {
      this.issuedFor = args.issuedFor;
    }
    if (args.issuedTime !== undefined) {
      this.issuedTime = args.issuedTime;
    }
    if (args.notBefore !== undefined) {
      this.notBefore = args.notBefore;
    }
    if (args.notAfter !== undefined) {
      this.notAfter = args.notAfter;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
  }
};
ezbake.base.thrift.ValidityCaveats.prototype = {};
ezbake.base.thrift.ValidityCaveats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.issuer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.issuedTo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.issuedFor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.issuedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.notBefore = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.notAfter = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.ValidityCaveats.prototype.write = function(output) {
  output.writeStructBegin('ValidityCaveats');
  if (this.issuer !== null && this.issuer !== undefined) {
    output.writeFieldBegin('issuer', Thrift.Type.STRING, 1);
    output.writeString(this.issuer);
    output.writeFieldEnd();
  }
  if (this.issuedTo !== null && this.issuedTo !== undefined) {
    output.writeFieldBegin('issuedTo', Thrift.Type.STRING, 2);
    output.writeString(this.issuedTo);
    output.writeFieldEnd();
  }
  if (this.issuedFor !== null && this.issuedFor !== undefined) {
    output.writeFieldBegin('issuedFor', Thrift.Type.STRING, 3);
    output.writeString(this.issuedFor);
    output.writeFieldEnd();
  }
  if (this.issuedTime !== null && this.issuedTime !== undefined) {
    output.writeFieldBegin('issuedTime', Thrift.Type.I64, 4);
    output.writeI64(this.issuedTime);
    output.writeFieldEnd();
  }
  if (this.notBefore !== null && this.notBefore !== undefined) {
    output.writeFieldBegin('notBefore', Thrift.Type.I64, 5);
    output.writeI64(this.notBefore);
    output.writeFieldEnd();
  }
  if (this.notAfter !== null && this.notAfter !== undefined) {
    output.writeFieldBegin('notAfter', Thrift.Type.I64, 6);
    output.writeI64(this.notAfter);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 7);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.EzSecurityPrincipal = module.exports.EzSecurityPrincipal = function(args) {
  this.principal = null;
  this.issuer = null;
  this.validity = null;
  this.requestChain = null;
  this.externalID = null;
  this.name = null;
  if (args) {
    if (args.principal !== undefined) {
      this.principal = args.principal;
    }
    if (args.issuer !== undefined) {
      this.issuer = args.issuer;
    }
    if (args.validity !== undefined) {
      this.validity = args.validity;
    }
    if (args.requestChain !== undefined) {
      this.requestChain = args.requestChain;
    }
    if (args.externalID !== undefined) {
      this.externalID = args.externalID;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ezbake.base.thrift.EzSecurityPrincipal.prototype = {};
ezbake.base.thrift.EzSecurityPrincipal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.issuer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.validity = new ttypes.ValidityCaveats();
        this.validity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.requestChain = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.requestChain.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.externalID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.EzSecurityPrincipal.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityPrincipal');
  if (this.principal !== null && this.principal !== undefined) {
    output.writeFieldBegin('principal', Thrift.Type.STRING, 1);
    output.writeString(this.principal);
    output.writeFieldEnd();
  }
  if (this.issuer !== null && this.issuer !== undefined) {
    output.writeFieldBegin('issuer', Thrift.Type.STRING, 6);
    output.writeString(this.issuer);
    output.writeFieldEnd();
  }
  if (this.validity !== null && this.validity !== undefined) {
    output.writeFieldBegin('validity', Thrift.Type.STRUCT, 2);
    this.validity.write(output);
    output.writeFieldEnd();
  }
  if (this.requestChain !== null && this.requestChain !== undefined) {
    output.writeFieldBegin('requestChain', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.requestChain.length);
    for (var iter71 in this.requestChain)
    {
      if (this.requestChain.hasOwnProperty(iter71))
      {
        iter71 = this.requestChain[iter71];
        output.writeString(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.externalID !== null && this.externalID !== undefined) {
    output.writeFieldBegin('externalID', Thrift.Type.STRING, 4);
    output.writeString(this.externalID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.EzSecurityToken = module.exports.EzSecurityToken = function(args) {
  this.validity = null;
  this.type = 0;
  this.tokenPrincipal = null;
  this.authorizationLevel = null;
  this.authorizations = null;
  this.externalProjectGroups = null;
  this.externalCommunities = null;
  this.citizenship = null;
  this.organization = null;
  this.validForExternalRequest = false;
  this.externalRequestPrincipal = null;
  this.externalRequestPrincipalIssuer = null;
  if (args) {
    if (args.validity !== undefined) {
      this.validity = args.validity;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.tokenPrincipal !== undefined) {
      this.tokenPrincipal = args.tokenPrincipal;
    }
    if (args.authorizationLevel !== undefined) {
      this.authorizationLevel = args.authorizationLevel;
    }
    if (args.authorizations !== undefined) {
      this.authorizations = args.authorizations;
    }
    if (args.externalProjectGroups !== undefined) {
      this.externalProjectGroups = args.externalProjectGroups;
    }
    if (args.externalCommunities !== undefined) {
      this.externalCommunities = args.externalCommunities;
    }
    if (args.citizenship !== undefined) {
      this.citizenship = args.citizenship;
    }
    if (args.organization !== undefined) {
      this.organization = args.organization;
    }
    if (args.validForExternalRequest !== undefined) {
      this.validForExternalRequest = args.validForExternalRequest;
    }
    if (args.externalRequestPrincipal !== undefined) {
      this.externalRequestPrincipal = args.externalRequestPrincipal;
    }
    if (args.externalRequestPrincipalIssuer !== undefined) {
      this.externalRequestPrincipalIssuer = args.externalRequestPrincipalIssuer;
    }
  }
};
ezbake.base.thrift.EzSecurityToken.prototype = {};
ezbake.base.thrift.EzSecurityToken.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validity = new ttypes.ValidityCaveats();
        this.validity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokenPrincipal = new ttypes.EzSecurityPrincipal();
        this.tokenPrincipal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.authorizationLevel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorizations = new ezbakeBaseAuthorizations_ttypes.Authorizations();
        this.authorizations.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.MAP) {
        var _size72 = 0;
        var _rtmp376;
        this.externalProjectGroups = {};
        var _ktype73 = 0;
        var _vtype74 = 0;
        _rtmp376 = input.readMapBegin();
        _ktype73 = _rtmp376.ktype;
        _vtype74 = _rtmp376.vtype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var key78 = null;
          var val79 = null;
          key78 = input.readString();
          var _size80 = 0;
          var _rtmp384;
          val79 = [];
          var _etype83 = 0;
          _rtmp384 = input.readListBegin();
          _etype83 = _rtmp384.etype;
          _size80 = _rtmp384.size;
          for (var _i85 = 0; _i85 < _size80; ++_i85)
          {
            var elem86 = null;
            elem86 = input.readString();
            val79.push(elem86);
          }
          input.readListEnd();
          this.externalProjectGroups[key78] = val79;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.MAP) {
        var _size87 = 0;
        var _rtmp391;
        this.externalCommunities = {};
        var _ktype88 = 0;
        var _vtype89 = 0;
        _rtmp391 = input.readMapBegin();
        _ktype88 = _rtmp391.ktype;
        _vtype89 = _rtmp391.vtype;
        _size87 = _rtmp391.size;
        for (var _i92 = 0; _i92 < _size87; ++_i92)
        {
          var key93 = null;
          var val94 = null;
          key93 = input.readString();
          val94 = new ttypes.CommunityMembership();
          val94.read(input);
          this.externalCommunities[key93] = val94;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.citizenship = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.validForExternalRequest = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.externalRequestPrincipal = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.externalRequestPrincipalIssuer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.EzSecurityToken.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityToken');
  if (this.validity !== null && this.validity !== undefined) {
    output.writeFieldBegin('validity', Thrift.Type.STRUCT, 1);
    this.validity.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.tokenPrincipal !== null && this.tokenPrincipal !== undefined) {
    output.writeFieldBegin('tokenPrincipal', Thrift.Type.STRUCT, 3);
    this.tokenPrincipal.write(output);
    output.writeFieldEnd();
  }
  if (this.authorizationLevel !== null && this.authorizationLevel !== undefined) {
    output.writeFieldBegin('authorizationLevel', Thrift.Type.STRING, 10);
    output.writeString(this.authorizationLevel);
    output.writeFieldEnd();
  }
  if (this.authorizations !== null && this.authorizations !== undefined) {
    output.writeFieldBegin('authorizations', Thrift.Type.STRUCT, 11);
    this.authorizations.write(output);
    output.writeFieldEnd();
  }
  if (this.externalProjectGroups !== null && this.externalProjectGroups !== undefined) {
    output.writeFieldBegin('externalProjectGroups', Thrift.Type.MAP, 13);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.externalProjectGroups));
    for (var kiter95 in this.externalProjectGroups)
    {
      if (this.externalProjectGroups.hasOwnProperty(kiter95))
      {
        var viter96 = this.externalProjectGroups[kiter95];
        output.writeString(kiter95);
        output.writeListBegin(Thrift.Type.STRING, viter96.length);
        for (var iter97 in viter96)
        {
          if (viter96.hasOwnProperty(iter97))
          {
            iter97 = viter96[iter97];
            output.writeString(iter97);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.externalCommunities !== null && this.externalCommunities !== undefined) {
    output.writeFieldBegin('externalCommunities', Thrift.Type.MAP, 14);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.externalCommunities));
    for (var kiter98 in this.externalCommunities)
    {
      if (this.externalCommunities.hasOwnProperty(kiter98))
      {
        var viter99 = this.externalCommunities[kiter98];
        output.writeString(kiter98);
        viter99.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.citizenship !== null && this.citizenship !== undefined) {
    output.writeFieldBegin('citizenship', Thrift.Type.STRING, 15);
    output.writeString(this.citizenship);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 16);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  if (this.validForExternalRequest !== null && this.validForExternalRequest !== undefined) {
    output.writeFieldBegin('validForExternalRequest', Thrift.Type.BOOL, 17);
    output.writeBool(this.validForExternalRequest);
    output.writeFieldEnd();
  }
  if (this.externalRequestPrincipal !== null && this.externalRequestPrincipal !== undefined) {
    output.writeFieldBegin('externalRequestPrincipal', Thrift.Type.STRING, 18);
    output.writeString(this.externalRequestPrincipal);
    output.writeFieldEnd();
  }
  if (this.externalRequestPrincipalIssuer !== null && this.externalRequestPrincipalIssuer !== undefined) {
    output.writeFieldBegin('externalRequestPrincipalIssuer', Thrift.Type.STRING, 19);
    output.writeString(this.externalRequestPrincipalIssuer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.EzSecurityTokenException = module.exports.EzSecurityTokenException = function(args) {
  Thrift.TException.call(this, "ezbake.base.thrift.EzSecurityTokenException")
  this.name = "ezbake.base.thrift.EzSecurityTokenException"
  this.message = null;
  this.originalException = null;
  this.type = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.originalException !== undefined) {
      this.originalException = args.originalException;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
Thrift.inherits(ezbake.base.thrift.EzSecurityTokenException, Thrift.TException);
ezbake.base.thrift.EzSecurityTokenException.prototype.name = 'EzSecurityTokenException';
ezbake.base.thrift.EzSecurityTokenException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.originalException = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.EzSecurityTokenException.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityTokenException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.originalException !== null && this.originalException !== undefined) {
    output.writeFieldBegin('originalException', Thrift.Type.STRING, 2);
    output.writeString(this.originalException);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.EzSecurityTokenJson = module.exports.EzSecurityTokenJson = function(args) {
  this.json = null;
  this.signature = null;
  if (args) {
    if (args.json !== undefined) {
      this.json = args.json;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
  }
};
ezbake.base.thrift.EzSecurityTokenJson.prototype = {};
ezbake.base.thrift.EzSecurityTokenJson.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.json = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.EzSecurityTokenJson.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityTokenJson');
  if (this.json !== null && this.json !== undefined) {
    output.writeFieldBegin('json', Thrift.Type.STRING, 1);
    output.writeString(this.json);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 2);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.X509Info = module.exports.X509Info = function(args) {
  this.subject = null;
  this.issuer = null;
  if (args) {
    if (args.subject !== undefined) {
      this.subject = args.subject;
    }
    if (args.issuer !== undefined) {
      this.issuer = args.issuer;
    }
  }
};
ezbake.base.thrift.X509Info.prototype = {};
ezbake.base.thrift.X509Info.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.issuer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.X509Info.prototype.write = function(output) {
  output.writeStructBegin('X509Info');
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 1);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.issuer !== null && this.issuer !== undefined) {
    output.writeFieldBegin('issuer', Thrift.Type.STRING, 2);
    output.writeString(this.issuer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.ProxyUserToken = module.exports.ProxyUserToken = function(args) {
  this.x509 = null;
  this.issuedBy = null;
  this.issuedTo = null;
  this.issuedFor = null;
  this.notAfter = null;
  this.notBefore = null;
  if (args) {
    if (args.x509 !== undefined) {
      this.x509 = args.x509;
    }
    if (args.issuedBy !== undefined) {
      this.issuedBy = args.issuedBy;
    }
    if (args.issuedTo !== undefined) {
      this.issuedTo = args.issuedTo;
    }
    if (args.issuedFor !== undefined) {
      this.issuedFor = args.issuedFor;
    }
    if (args.notAfter !== undefined) {
      this.notAfter = args.notAfter;
    }
    if (args.notBefore !== undefined) {
      this.notBefore = args.notBefore;
    }
  }
};
ezbake.base.thrift.ProxyUserToken.prototype = {};
ezbake.base.thrift.ProxyUserToken.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.x509 = new ttypes.X509Info();
        this.x509.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.issuedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.issuedTo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.issuedFor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.notAfter = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.notBefore = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.ProxyUserToken.prototype.write = function(output) {
  output.writeStructBegin('ProxyUserToken');
  if (this.x509 !== null && this.x509 !== undefined) {
    output.writeFieldBegin('x509', Thrift.Type.STRUCT, 1);
    this.x509.write(output);
    output.writeFieldEnd();
  }
  if (this.issuedBy !== null && this.issuedBy !== undefined) {
    output.writeFieldBegin('issuedBy', Thrift.Type.STRING, 10);
    output.writeString(this.issuedBy);
    output.writeFieldEnd();
  }
  if (this.issuedTo !== null && this.issuedTo !== undefined) {
    output.writeFieldBegin('issuedTo', Thrift.Type.STRING, 11);
    output.writeString(this.issuedTo);
    output.writeFieldEnd();
  }
  if (this.issuedFor !== null && this.issuedFor !== undefined) {
    output.writeFieldBegin('issuedFor', Thrift.Type.STRING, 12);
    output.writeString(this.issuedFor);
    output.writeFieldEnd();
  }
  if (this.notAfter !== null && this.notAfter !== undefined) {
    output.writeFieldBegin('notAfter', Thrift.Type.I64, 13);
    output.writeI64(this.notAfter);
    output.writeFieldEnd();
  }
  if (this.notBefore !== null && this.notBefore !== undefined) {
    output.writeFieldBegin('notBefore', Thrift.Type.I64, 14);
    output.writeI64(this.notBefore);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.ProxyPrincipal = module.exports.ProxyPrincipal = function(args) {
  this.proxyToken = null;
  this.signature = null;
  if (args) {
    if (args.proxyToken !== undefined) {
      this.proxyToken = args.proxyToken;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
  }
};
ezbake.base.thrift.ProxyPrincipal.prototype = {};
ezbake.base.thrift.ProxyPrincipal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.proxyToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.ProxyPrincipal.prototype.write = function(output) {
  output.writeStructBegin('ProxyPrincipal');
  if (this.proxyToken !== null && this.proxyToken !== undefined) {
    output.writeFieldBegin('proxyToken', Thrift.Type.STRING, 1);
    output.writeString(this.proxyToken);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 2);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ezbake.base.thrift.TokenRequest = module.exports.TokenRequest = function(args) {
  this.securityId = null;
  this.targetSecurityId = null;
  this.timestamp = null;
  this.type = 0;
  this.caveats = null;
  this.proxyPrincipal = null;
  this.tokenPrincipal = null;
  this.principal = null;
  if (args) {
    if (args.securityId !== undefined) {
      this.securityId = args.securityId;
    }
    if (args.targetSecurityId !== undefined) {
      this.targetSecurityId = args.targetSecurityId;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.caveats !== undefined) {
      this.caveats = args.caveats;
    }
    if (args.proxyPrincipal !== undefined) {
      this.proxyPrincipal = args.proxyPrincipal;
    }
    if (args.tokenPrincipal !== undefined) {
      this.tokenPrincipal = args.tokenPrincipal;
    }
    if (args.principal !== undefined) {
      this.principal = args.principal;
    }
  }
};
ezbake.base.thrift.TokenRequest.prototype = {};
ezbake.base.thrift.TokenRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.securityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetSecurityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.caveats = new ttypes.ValidityCaveats();
        this.caveats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxyPrincipal = new ttypes.ProxyPrincipal();
        this.proxyPrincipal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokenPrincipal = new ttypes.EzSecurityToken();
        this.tokenPrincipal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.principal = new ttypes.EzSecurityPrincipal();
        this.principal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ezbake.base.thrift.TokenRequest.prototype.write = function(output) {
  output.writeStructBegin('TokenRequest');
  if (this.securityId !== null && this.securityId !== undefined) {
    output.writeFieldBegin('securityId', Thrift.Type.STRING, 1);
    output.writeString(this.securityId);
    output.writeFieldEnd();
  }
  if (this.targetSecurityId !== null && this.targetSecurityId !== undefined) {
    output.writeFieldBegin('targetSecurityId', Thrift.Type.STRING, 2);
    output.writeString(this.targetSecurityId);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.caveats !== null && this.caveats !== undefined) {
    output.writeFieldBegin('caveats', Thrift.Type.STRUCT, 6);
    this.caveats.write(output);
    output.writeFieldEnd();
  }
  if (this.proxyPrincipal !== null && this.proxyPrincipal !== undefined) {
    output.writeFieldBegin('proxyPrincipal', Thrift.Type.STRUCT, 10);
    this.proxyPrincipal.write(output);
    output.writeFieldEnd();
  }
  if (this.tokenPrincipal !== null && this.tokenPrincipal !== undefined) {
    output.writeFieldBegin('tokenPrincipal', Thrift.Type.STRUCT, 11);
    this.tokenPrincipal.write(output);
    output.writeFieldEnd();
  }
  if (this.principal !== null && this.principal !== undefined) {
    output.writeFieldBegin('principal', Thrift.Type.STRUCT, 12);
    this.principal.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

