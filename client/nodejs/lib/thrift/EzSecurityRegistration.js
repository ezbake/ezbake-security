/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ezbakeBaseTypes_ttypes = require('./ezbakeBaseTypes_types')
var ezbakeBaseService_ttypes = require('./ezbakeBaseService_types')


var EzBakeBaseService = require('./EzBakeBaseService')
var EzBakeBaseServiceClient = EzBakeBaseService.Client
var EzBakeBaseServiceProcessor = EzBakeBaseService.Processor
var ttypes = require('./EzSecurityRegistration_types');
//HELPER FUNCTIONS AND STRUCTURES

EzSecurityRegistration_registerApp_args = function(args) {
  this.ezToken = null;
  this.appName = null;
  this.classification = null;
  this.authorizations = null;
  this.id = null;
  this.admins = null;
  this.appDn = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.appName !== undefined) {
      this.appName = args.appName;
    }
    if (args.classification !== undefined) {
      this.classification = args.classification;
    }
    if (args.authorizations !== undefined) {
      this.authorizations = args.authorizations;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.admins !== undefined) {
      this.admins = args.admins;
    }
    if (args.appDn !== undefined) {
      this.appDn = args.appDn;
    }
  }
};
EzSecurityRegistration_registerApp_args.prototype = {};
EzSecurityRegistration_registerApp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.classification = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.authorizations = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.authorizations.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size23 = 0;
        var _rtmp327;
        this.admins = [];
        var _etype26 = 0;
        _rtmp327 = input.readSetBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readString();
          this.admins.push(elem29);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.appDn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_registerApp_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_registerApp_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.appName !== null && this.appName !== undefined) {
    output.writeFieldBegin('appName', Thrift.Type.STRING, 2);
    output.writeString(this.appName);
    output.writeFieldEnd();
  }
  if (this.classification !== null && this.classification !== undefined) {
    output.writeFieldBegin('classification', Thrift.Type.STRING, 3);
    output.writeString(this.classification);
    output.writeFieldEnd();
  }
  if (this.authorizations !== null && this.authorizations !== undefined) {
    output.writeFieldBegin('authorizations', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.authorizations.length);
    for (var iter30 in this.authorizations)
    {
      if (this.authorizations.hasOwnProperty(iter30))
      {
        iter30 = this.authorizations[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 5);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.admins !== null && this.admins !== undefined) {
    output.writeFieldBegin('admins', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRING, this.admins.length);
    for (var iter31 in this.admins)
    {
      if (this.admins.hasOwnProperty(iter31))
      {
        iter31 = this.admins[iter31];
        output.writeString(iter31);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.appDn !== null && this.appDn !== undefined) {
    output.writeFieldBegin('appDn', Thrift.Type.STRING, 7);
    output.writeString(this.appDn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_registerApp_result = function(args) {
  this.success = null;
  this.regException = null;
  this.sidException = null;
  if (args instanceof ttypes.RegistrationException) {
    this.regException = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDExistsException) {
    this.sidException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.regException !== undefined) {
      this.regException = args.regException;
    }
    if (args.sidException !== undefined) {
      this.sidException = args.sidException;
    }
  }
};
EzSecurityRegistration_registerApp_result.prototype = {};
EzSecurityRegistration_registerApp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regException = new ttypes.RegistrationException();
        this.regException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sidException = new ttypes.SecurityIDExistsException();
        this.sidException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_registerApp_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_registerApp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.regException !== null && this.regException !== undefined) {
    output.writeFieldBegin('regException', Thrift.Type.STRUCT, 1);
    this.regException.write(output);
    output.writeFieldEnd();
  }
  if (this.sidException !== null && this.sidException !== undefined) {
    output.writeFieldBegin('sidException', Thrift.Type.STRUCT, 2);
    this.sidException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_promote_args = function(args) {
  this.ezToken = null;
  this.id = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
EzSecurityRegistration_promote_args.prototype = {};
EzSecurityRegistration_promote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_promote_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_promote_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_promote_result = function(args) {
  this.regException = null;
  this.sidnfException = null;
  this.pdException = null;
  if (args instanceof ttypes.RegistrationException) {
    this.regException = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDNotFoundException) {
    this.sidnfException = args;
    return;
  }
  if (args instanceof ttypes.PermissionDeniedException) {
    this.pdException = args;
    return;
  }
  if (args) {
    if (args.regException !== undefined) {
      this.regException = args.regException;
    }
    if (args.sidnfException !== undefined) {
      this.sidnfException = args.sidnfException;
    }
    if (args.pdException !== undefined) {
      this.pdException = args.pdException;
    }
  }
};
EzSecurityRegistration_promote_result.prototype = {};
EzSecurityRegistration_promote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regException = new ttypes.RegistrationException();
        this.regException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sidnfException = new ttypes.SecurityIDNotFoundException();
        this.sidnfException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pdException = new ttypes.PermissionDeniedException();
        this.pdException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_promote_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_promote_result');
  if (this.regException !== null && this.regException !== undefined) {
    output.writeFieldBegin('regException', Thrift.Type.STRUCT, 1);
    this.regException.write(output);
    output.writeFieldEnd();
  }
  if (this.sidnfException !== null && this.sidnfException !== undefined) {
    output.writeFieldBegin('sidnfException', Thrift.Type.STRUCT, 2);
    this.sidnfException.write(output);
    output.writeFieldEnd();
  }
  if (this.pdException !== null && this.pdException !== undefined) {
    output.writeFieldBegin('pdException', Thrift.Type.STRUCT, 3);
    this.pdException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_denyApp_args = function(args) {
  this.ezToken = null;
  this.id = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
EzSecurityRegistration_denyApp_args.prototype = {};
EzSecurityRegistration_denyApp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_denyApp_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_denyApp_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_denyApp_result = function(args) {
  this.regException = null;
  this.sidnfException = null;
  this.pdException = null;
  if (args instanceof ttypes.RegistrationException) {
    this.regException = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDNotFoundException) {
    this.sidnfException = args;
    return;
  }
  if (args instanceof ttypes.PermissionDeniedException) {
    this.pdException = args;
    return;
  }
  if (args) {
    if (args.regException !== undefined) {
      this.regException = args.regException;
    }
    if (args.sidnfException !== undefined) {
      this.sidnfException = args.sidnfException;
    }
    if (args.pdException !== undefined) {
      this.pdException = args.pdException;
    }
  }
};
EzSecurityRegistration_denyApp_result.prototype = {};
EzSecurityRegistration_denyApp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regException = new ttypes.RegistrationException();
        this.regException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sidnfException = new ttypes.SecurityIDNotFoundException();
        this.sidnfException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pdException = new ttypes.PermissionDeniedException();
        this.pdException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_denyApp_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_denyApp_result');
  if (this.regException !== null && this.regException !== undefined) {
    output.writeFieldBegin('regException', Thrift.Type.STRUCT, 1);
    this.regException.write(output);
    output.writeFieldEnd();
  }
  if (this.sidnfException !== null && this.sidnfException !== undefined) {
    output.writeFieldBegin('sidnfException', Thrift.Type.STRUCT, 2);
    this.sidnfException.write(output);
    output.writeFieldEnd();
  }
  if (this.pdException !== null && this.pdException !== undefined) {
    output.writeFieldBegin('pdException', Thrift.Type.STRUCT, 3);
    this.pdException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_demote_args = function(args) {
  this.ezToken = null;
  this.id = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
EzSecurityRegistration_demote_args.prototype = {};
EzSecurityRegistration_demote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_demote_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_demote_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_demote_result = function(args) {
  this.regException = null;
  this.sidnfException = null;
  if (args instanceof ttypes.RegistrationException) {
    this.regException = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDNotFoundException) {
    this.sidnfException = args;
    return;
  }
  if (args) {
    if (args.regException !== undefined) {
      this.regException = args.regException;
    }
    if (args.sidnfException !== undefined) {
      this.sidnfException = args.sidnfException;
    }
  }
};
EzSecurityRegistration_demote_result.prototype = {};
EzSecurityRegistration_demote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regException = new ttypes.RegistrationException();
        this.regException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sidnfException = new ttypes.SecurityIDNotFoundException();
        this.sidnfException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_demote_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_demote_result');
  if (this.regException !== null && this.regException !== undefined) {
    output.writeFieldBegin('regException', Thrift.Type.STRUCT, 1);
    this.regException.write(output);
    output.writeFieldEnd();
  }
  if (this.sidnfException !== null && this.sidnfException !== undefined) {
    output.writeFieldBegin('sidnfException', Thrift.Type.STRUCT, 2);
    this.sidnfException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_update_args = function(args) {
  this.ezToken = null;
  this.registration = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.registration !== undefined) {
      this.registration = args.registration;
    }
  }
};
EzSecurityRegistration_update_args.prototype = {};
EzSecurityRegistration_update_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.registration = new ttypes.ApplicationRegistration();
        this.registration.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_update_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_update_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.registration !== null && this.registration !== undefined) {
    output.writeFieldBegin('registration', Thrift.Type.STRUCT, 2);
    this.registration.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_update_result = function(args) {
  this.regException = null;
  this.sidnfException = null;
  if (args instanceof ttypes.RegistrationException) {
    this.regException = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDNotFoundException) {
    this.sidnfException = args;
    return;
  }
  if (args) {
    if (args.regException !== undefined) {
      this.regException = args.regException;
    }
    if (args.sidnfException !== undefined) {
      this.sidnfException = args.sidnfException;
    }
  }
};
EzSecurityRegistration_update_result.prototype = {};
EzSecurityRegistration_update_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regException = new ttypes.RegistrationException();
        this.regException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sidnfException = new ttypes.SecurityIDNotFoundException();
        this.sidnfException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_update_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_update_result');
  if (this.regException !== null && this.regException !== undefined) {
    output.writeFieldBegin('regException', Thrift.Type.STRUCT, 1);
    this.regException.write(output);
    output.writeFieldEnd();
  }
  if (this.sidnfException !== null && this.sidnfException !== undefined) {
    output.writeFieldBegin('sidnfException', Thrift.Type.STRUCT, 2);
    this.sidnfException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_deactivate_args = function(args) {
  this.ezToken = null;
  this.id = null;
  this.message = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
EzSecurityRegistration_deactivate_args.prototype = {};
EzSecurityRegistration_deactivate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_deactivate_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_deactivate_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_deactivate_result = function(args) {
  this.genericError = null;
  this.idNotFound = null;
  if (args instanceof ttypes.RegistrationException) {
    this.genericError = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDNotFoundException) {
    this.idNotFound = args;
    return;
  }
  if (args) {
    if (args.genericError !== undefined) {
      this.genericError = args.genericError;
    }
    if (args.idNotFound !== undefined) {
      this.idNotFound = args.idNotFound;
    }
  }
};
EzSecurityRegistration_deactivate_result.prototype = {};
EzSecurityRegistration_deactivate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.genericError = new ttypes.RegistrationException();
        this.genericError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.idNotFound = new ttypes.SecurityIDNotFoundException();
        this.idNotFound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_deactivate_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_deactivate_result');
  if (this.genericError !== null && this.genericError !== undefined) {
    output.writeFieldBegin('genericError', Thrift.Type.STRUCT, 1);
    this.genericError.write(output);
    output.writeFieldEnd();
  }
  if (this.idNotFound !== null && this.idNotFound !== undefined) {
    output.writeFieldBegin('idNotFound', Thrift.Type.STRUCT, 2);
    this.idNotFound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_getRegistration_args = function(args) {
  this.ezToken = null;
  this.id = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
EzSecurityRegistration_getRegistration_args.prototype = {};
EzSecurityRegistration_getRegistration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_getRegistration_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_getRegistration_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_getRegistration_result = function(args) {
  this.success = null;
  this.regException = null;
  this.sidnfException = null;
  this.pemException = null;
  if (args instanceof ttypes.RegistrationException) {
    this.regException = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDNotFoundException) {
    this.sidnfException = args;
    return;
  }
  if (args instanceof ttypes.PermissionDeniedException) {
    this.pemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.regException !== undefined) {
      this.regException = args.regException;
    }
    if (args.sidnfException !== undefined) {
      this.sidnfException = args.sidnfException;
    }
    if (args.pemException !== undefined) {
      this.pemException = args.pemException;
    }
  }
};
EzSecurityRegistration_getRegistration_result.prototype = {};
EzSecurityRegistration_getRegistration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ApplicationRegistration();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regException = new ttypes.RegistrationException();
        this.regException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sidnfException = new ttypes.SecurityIDNotFoundException();
        this.sidnfException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pemException = new ttypes.PermissionDeniedException();
        this.pemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_getRegistration_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_getRegistration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.regException !== null && this.regException !== undefined) {
    output.writeFieldBegin('regException', Thrift.Type.STRUCT, 1);
    this.regException.write(output);
    output.writeFieldEnd();
  }
  if (this.sidnfException !== null && this.sidnfException !== undefined) {
    output.writeFieldBegin('sidnfException', Thrift.Type.STRUCT, 2);
    this.sidnfException.write(output);
    output.writeFieldEnd();
  }
  if (this.pemException !== null && this.pemException !== undefined) {
    output.writeFieldBegin('pemException', Thrift.Type.STRUCT, 3);
    this.pemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_getStatus_args = function(args) {
  this.ezToken = null;
  this.id = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
EzSecurityRegistration_getStatus_args.prototype = {};
EzSecurityRegistration_getStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_getStatus_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_getStatus_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_getStatus_result = function(args) {
  this.success = null;
  this.regException = null;
  this.sidnfException = null;
  if (args instanceof ttypes.RegistrationException) {
    this.regException = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDNotFoundException) {
    this.sidnfException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.regException !== undefined) {
      this.regException = args.regException;
    }
    if (args.sidnfException !== undefined) {
      this.sidnfException = args.sidnfException;
    }
  }
};
EzSecurityRegistration_getStatus_result.prototype = {};
EzSecurityRegistration_getStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regException = new ttypes.RegistrationException();
        this.regException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sidnfException = new ttypes.SecurityIDNotFoundException();
        this.sidnfException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_getStatus_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_getStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.regException !== null && this.regException !== undefined) {
    output.writeFieldBegin('regException', Thrift.Type.STRUCT, 1);
    this.regException.write(output);
    output.writeFieldEnd();
  }
  if (this.sidnfException !== null && this.sidnfException !== undefined) {
    output.writeFieldBegin('sidnfException', Thrift.Type.STRUCT, 2);
    this.sidnfException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_getRegistrations_args = function(args) {
  this.ezToken = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
  }
};
EzSecurityRegistration_getRegistrations_args.prototype = {};
EzSecurityRegistration_getRegistrations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_getRegistrations_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_getRegistrations_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_getRegistrations_result = function(args) {
  this.success = null;
  this.regException = null;
  if (args instanceof ttypes.RegistrationException) {
    this.regException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.regException !== undefined) {
      this.regException = args.regException;
    }
  }
};
EzSecurityRegistration_getRegistrations_result.prototype = {};
EzSecurityRegistration_getRegistrations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.ApplicationRegistration();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regException = new ttypes.RegistrationException();
        this.regException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_getRegistrations_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_getRegistrations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.regException !== null && this.regException !== undefined) {
    output.writeFieldBegin('regException', Thrift.Type.STRUCT, 1);
    this.regException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_getAllRegistrations_args = function(args) {
  this.ezToken = null;
  this.status = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
EzSecurityRegistration_getAllRegistrations_args.prototype = {};
EzSecurityRegistration_getAllRegistrations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_getAllRegistrations_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_getAllRegistrations_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_getAllRegistrations_result = function(args) {
  this.success = null;
  this.regException = null;
  if (args instanceof ttypes.RegistrationException) {
    this.regException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.regException !== undefined) {
      this.regException = args.regException;
    }
  }
};
EzSecurityRegistration_getAllRegistrations_result.prototype = {};
EzSecurityRegistration_getAllRegistrations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.ApplicationRegistration();
          elem46.read(input);
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regException = new ttypes.RegistrationException();
        this.regException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_getAllRegistrations_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_getAllRegistrations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.regException !== null && this.regException !== undefined) {
    output.writeFieldBegin('regException', Thrift.Type.STRUCT, 1);
    this.regException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_getAppCerts_args = function(args) {
  this.ezToken = null;
  this.id = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
EzSecurityRegistration_getAppCerts_args.prototype = {};
EzSecurityRegistration_getAppCerts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_getAppCerts_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_getAppCerts_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_getAppCerts_result = function(args) {
  this.success = null;
  this.regException = null;
  this.sidnfException = null;
  if (args instanceof ttypes.RegistrationException) {
    this.regException = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDNotFoundException) {
    this.sidnfException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.regException !== undefined) {
      this.regException = args.regException;
    }
    if (args.sidnfException !== undefined) {
      this.sidnfException = args.sidnfException;
    }
  }
};
EzSecurityRegistration_getAppCerts_result.prototype = {};
EzSecurityRegistration_getAppCerts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AppCerts();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regException = new ttypes.RegistrationException();
        this.regException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sidnfException = new ttypes.SecurityIDNotFoundException();
        this.sidnfException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_getAppCerts_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_getAppCerts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.regException !== null && this.regException !== undefined) {
    output.writeFieldBegin('regException', Thrift.Type.STRUCT, 1);
    this.regException.write(output);
    output.writeFieldEnd();
  }
  if (this.sidnfException !== null && this.sidnfException !== undefined) {
    output.writeFieldBegin('sidnfException', Thrift.Type.STRUCT, 2);
    this.sidnfException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_addAdmin_args = function(args) {
  this.ezToken = null;
  this.id = null;
  this.admin = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.admin !== undefined) {
      this.admin = args.admin;
    }
  }
};
EzSecurityRegistration_addAdmin_args.prototype = {};
EzSecurityRegistration_addAdmin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.admin = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_addAdmin_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_addAdmin_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.admin !== null && this.admin !== undefined) {
    output.writeFieldBegin('admin', Thrift.Type.STRING, 3);
    output.writeString(this.admin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_addAdmin_result = function(args) {
  this.pdException = null;
  this.sidnfException = null;
  this.rException = null;
  if (args instanceof ttypes.PermissionDeniedException) {
    this.pdException = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDNotFoundException) {
    this.sidnfException = args;
    return;
  }
  if (args instanceof ttypes.RegistrationException) {
    this.rException = args;
    return;
  }
  if (args) {
    if (args.pdException !== undefined) {
      this.pdException = args.pdException;
    }
    if (args.sidnfException !== undefined) {
      this.sidnfException = args.sidnfException;
    }
    if (args.rException !== undefined) {
      this.rException = args.rException;
    }
  }
};
EzSecurityRegistration_addAdmin_result.prototype = {};
EzSecurityRegistration_addAdmin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pdException = new ttypes.PermissionDeniedException();
        this.pdException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sidnfException = new ttypes.SecurityIDNotFoundException();
        this.sidnfException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.rException = new ttypes.RegistrationException();
        this.rException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_addAdmin_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_addAdmin_result');
  if (this.pdException !== null && this.pdException !== undefined) {
    output.writeFieldBegin('pdException', Thrift.Type.STRUCT, 1);
    this.pdException.write(output);
    output.writeFieldEnd();
  }
  if (this.sidnfException !== null && this.sidnfException !== undefined) {
    output.writeFieldBegin('sidnfException', Thrift.Type.STRUCT, 2);
    this.sidnfException.write(output);
    output.writeFieldEnd();
  }
  if (this.rException !== null && this.rException !== undefined) {
    output.writeFieldBegin('rException', Thrift.Type.STRUCT, 3);
    this.rException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_removeAdmin_args = function(args) {
  this.ezToken = null;
  this.id = null;
  this.admin = null;
  if (args) {
    if (args.ezToken !== undefined) {
      this.ezToken = args.ezToken;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.admin !== undefined) {
      this.admin = args.admin;
    }
  }
};
EzSecurityRegistration_removeAdmin_args.prototype = {};
EzSecurityRegistration_removeAdmin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ezToken = new ezbakeBaseTypes_ttypes.EzSecurityToken();
        this.ezToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.admin = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_removeAdmin_args.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_removeAdmin_args');
  if (this.ezToken !== null && this.ezToken !== undefined) {
    output.writeFieldBegin('ezToken', Thrift.Type.STRUCT, 1);
    this.ezToken.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.admin !== null && this.admin !== undefined) {
    output.writeFieldBegin('admin', Thrift.Type.STRING, 3);
    output.writeString(this.admin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistration_removeAdmin_result = function(args) {
  this.pdException = null;
  this.sidnfException = null;
  this.rException = null;
  if (args instanceof ttypes.PermissionDeniedException) {
    this.pdException = args;
    return;
  }
  if (args instanceof ttypes.SecurityIDNotFoundException) {
    this.sidnfException = args;
    return;
  }
  if (args instanceof ttypes.RegistrationException) {
    this.rException = args;
    return;
  }
  if (args) {
    if (args.pdException !== undefined) {
      this.pdException = args.pdException;
    }
    if (args.sidnfException !== undefined) {
      this.sidnfException = args.sidnfException;
    }
    if (args.rException !== undefined) {
      this.rException = args.rException;
    }
  }
};
EzSecurityRegistration_removeAdmin_result.prototype = {};
EzSecurityRegistration_removeAdmin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pdException = new ttypes.PermissionDeniedException();
        this.pdException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sidnfException = new ttypes.SecurityIDNotFoundException();
        this.sidnfException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.rException = new ttypes.RegistrationException();
        this.rException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EzSecurityRegistration_removeAdmin_result.prototype.write = function(output) {
  output.writeStructBegin('EzSecurityRegistration_removeAdmin_result');
  if (this.pdException !== null && this.pdException !== undefined) {
    output.writeFieldBegin('pdException', Thrift.Type.STRUCT, 1);
    this.pdException.write(output);
    output.writeFieldEnd();
  }
  if (this.sidnfException !== null && this.sidnfException !== undefined) {
    output.writeFieldBegin('sidnfException', Thrift.Type.STRUCT, 2);
    this.sidnfException.write(output);
    output.writeFieldEnd();
  }
  if (this.rException !== null && this.rException !== undefined) {
    output.writeFieldBegin('rException', Thrift.Type.STRUCT, 3);
    this.rException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EzSecurityRegistrationClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
Thrift.inherits(EzSecurityRegistrationClient, EzBakeBaseServiceClient)
EzSecurityRegistrationClient.prototype.registerApp = function(ezToken, appName, classification, authorizations, id, admins, appDn, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_registerApp(ezToken, appName, classification, authorizations, id, admins, appDn);
};

EzSecurityRegistrationClient.prototype.send_registerApp = function(ezToken, appName, classification, authorizations, id, admins, appDn) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerApp', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_registerApp_args();
  args.ezToken = ezToken;
  args.appName = appName;
  args.classification = classification;
  args.authorizations = authorizations;
  args.id = id;
  args.admins = admins;
  args.appDn = appDn;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_registerApp = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_registerApp_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.regException) {
    return callback(result.regException);
  }
  if (null !== result.sidException) {
    return callback(result.sidException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerApp failed: unknown result');
};
EzSecurityRegistrationClient.prototype.promote = function(ezToken, id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_promote(ezToken, id);
};

EzSecurityRegistrationClient.prototype.send_promote = function(ezToken, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('promote', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_promote_args();
  args.ezToken = ezToken;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_promote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_promote_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.regException) {
    return callback(result.regException);
  }
  if (null !== result.sidnfException) {
    return callback(result.sidnfException);
  }
  if (null !== result.pdException) {
    return callback(result.pdException);
  }
  callback(null)
};
EzSecurityRegistrationClient.prototype.denyApp = function(ezToken, id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_denyApp(ezToken, id);
};

EzSecurityRegistrationClient.prototype.send_denyApp = function(ezToken, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('denyApp', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_denyApp_args();
  args.ezToken = ezToken;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_denyApp = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_denyApp_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.regException) {
    return callback(result.regException);
  }
  if (null !== result.sidnfException) {
    return callback(result.sidnfException);
  }
  if (null !== result.pdException) {
    return callback(result.pdException);
  }
  callback(null)
};
EzSecurityRegistrationClient.prototype.demote = function(ezToken, id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_demote(ezToken, id);
};

EzSecurityRegistrationClient.prototype.send_demote = function(ezToken, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('demote', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_demote_args();
  args.ezToken = ezToken;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_demote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_demote_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.regException) {
    return callback(result.regException);
  }
  if (null !== result.sidnfException) {
    return callback(result.sidnfException);
  }
  callback(null)
};
EzSecurityRegistrationClient.prototype.update = function(ezToken, registration, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_update(ezToken, registration);
};

EzSecurityRegistrationClient.prototype.send_update = function(ezToken, registration) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_update_args();
  args.ezToken = ezToken;
  args.registration = registration;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_update = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_update_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.regException) {
    return callback(result.regException);
  }
  if (null !== result.sidnfException) {
    return callback(result.sidnfException);
  }
  callback(null)
};
EzSecurityRegistrationClient.prototype.deactivate = function(ezToken, id, message, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deactivate(ezToken, id, message);
};

EzSecurityRegistrationClient.prototype.send_deactivate = function(ezToken, id, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deactivate', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_deactivate_args();
  args.ezToken = ezToken;
  args.id = id;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_deactivate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_deactivate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.genericError) {
    return callback(result.genericError);
  }
  if (null !== result.idNotFound) {
    return callback(result.idNotFound);
  }
  callback(null)
};
EzSecurityRegistrationClient.prototype.getRegistration = function(ezToken, id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRegistration(ezToken, id);
};

EzSecurityRegistrationClient.prototype.send_getRegistration = function(ezToken, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRegistration', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_getRegistration_args();
  args.ezToken = ezToken;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_getRegistration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_getRegistration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.regException) {
    return callback(result.regException);
  }
  if (null !== result.sidnfException) {
    return callback(result.sidnfException);
  }
  if (null !== result.pemException) {
    return callback(result.pemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegistration failed: unknown result');
};
EzSecurityRegistrationClient.prototype.getStatus = function(ezToken, id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getStatus(ezToken, id);
};

EzSecurityRegistrationClient.prototype.send_getStatus = function(ezToken, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_getStatus_args();
  args.ezToken = ezToken;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_getStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_getStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.regException) {
    return callback(result.regException);
  }
  if (null !== result.sidnfException) {
    return callback(result.sidnfException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStatus failed: unknown result');
};
EzSecurityRegistrationClient.prototype.getRegistrations = function(ezToken, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRegistrations(ezToken);
};

EzSecurityRegistrationClient.prototype.send_getRegistrations = function(ezToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRegistrations', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_getRegistrations_args();
  args.ezToken = ezToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_getRegistrations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_getRegistrations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.regException) {
    return callback(result.regException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegistrations failed: unknown result');
};
EzSecurityRegistrationClient.prototype.getAllRegistrations = function(ezToken, status, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getAllRegistrations(ezToken, status);
};

EzSecurityRegistrationClient.prototype.send_getAllRegistrations = function(ezToken, status) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllRegistrations', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_getAllRegistrations_args();
  args.ezToken = ezToken;
  args.status = status;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_getAllRegistrations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_getAllRegistrations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.regException) {
    return callback(result.regException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllRegistrations failed: unknown result');
};
EzSecurityRegistrationClient.prototype.getAppCerts = function(ezToken, id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getAppCerts(ezToken, id);
};

EzSecurityRegistrationClient.prototype.send_getAppCerts = function(ezToken, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAppCerts', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_getAppCerts_args();
  args.ezToken = ezToken;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_getAppCerts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_getAppCerts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.regException) {
    return callback(result.regException);
  }
  if (null !== result.sidnfException) {
    return callback(result.sidnfException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAppCerts failed: unknown result');
};
EzSecurityRegistrationClient.prototype.addAdmin = function(ezToken, id, admin, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addAdmin(ezToken, id, admin);
};

EzSecurityRegistrationClient.prototype.send_addAdmin = function(ezToken, id, admin) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addAdmin', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_addAdmin_args();
  args.ezToken = ezToken;
  args.id = id;
  args.admin = admin;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_addAdmin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_addAdmin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.pdException) {
    return callback(result.pdException);
  }
  if (null !== result.sidnfException) {
    return callback(result.sidnfException);
  }
  if (null !== result.rException) {
    return callback(result.rException);
  }
  callback(null)
};
EzSecurityRegistrationClient.prototype.removeAdmin = function(ezToken, id, admin, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_removeAdmin(ezToken, id, admin);
};

EzSecurityRegistrationClient.prototype.send_removeAdmin = function(ezToken, id, admin) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeAdmin', Thrift.MessageType.CALL, this.seqid);
  var args = new EzSecurityRegistration_removeAdmin_args();
  args.ezToken = ezToken;
  args.id = id;
  args.admin = admin;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EzSecurityRegistrationClient.prototype.recv_removeAdmin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EzSecurityRegistration_removeAdmin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.pdException) {
    return callback(result.pdException);
  }
  if (null !== result.sidnfException) {
    return callback(result.sidnfException);
  }
  if (null !== result.rException) {
    return callback(result.rException);
  }
  callback(null)
};
EzSecurityRegistrationProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(EzSecurityRegistrationProcessor, EzBakeBaseServiceProcessor)
EzSecurityRegistrationProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

EzSecurityRegistrationProcessor.prototype.process_registerApp = function(seqid, input, output) {
  var args = new EzSecurityRegistration_registerApp_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.registerApp(args.ezToken, args.appName, args.classification, args.authorizations, args.id, args.admins, args.appDn, function (err, result) {
    var result = new EzSecurityRegistration_registerApp_result((err != null ? err : {success: result}));
    output.writeMessageBegin("registerApp", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_promote = function(seqid, input, output) {
  var args = new EzSecurityRegistration_promote_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.promote(args.ezToken, args.id, function (err, result) {
    var result = new EzSecurityRegistration_promote_result((err != null ? err : {success: result}));
    output.writeMessageBegin("promote", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_denyApp = function(seqid, input, output) {
  var args = new EzSecurityRegistration_denyApp_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.denyApp(args.ezToken, args.id, function (err, result) {
    var result = new EzSecurityRegistration_denyApp_result((err != null ? err : {success: result}));
    output.writeMessageBegin("denyApp", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_demote = function(seqid, input, output) {
  var args = new EzSecurityRegistration_demote_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.demote(args.ezToken, args.id, function (err, result) {
    var result = new EzSecurityRegistration_demote_result((err != null ? err : {success: result}));
    output.writeMessageBegin("demote", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_update = function(seqid, input, output) {
  var args = new EzSecurityRegistration_update_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.update(args.ezToken, args.registration, function (err, result) {
    var result = new EzSecurityRegistration_update_result((err != null ? err : {success: result}));
    output.writeMessageBegin("update", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_deactivate = function(seqid, input, output) {
  var args = new EzSecurityRegistration_deactivate_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deactivate(args.ezToken, args.id, args.message, function (err, result) {
    var result = new EzSecurityRegistration_deactivate_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deactivate", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_getRegistration = function(seqid, input, output) {
  var args = new EzSecurityRegistration_getRegistration_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRegistration(args.ezToken, args.id, function (err, result) {
    var result = new EzSecurityRegistration_getRegistration_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRegistration", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_getStatus = function(seqid, input, output) {
  var args = new EzSecurityRegistration_getStatus_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getStatus(args.ezToken, args.id, function (err, result) {
    var result = new EzSecurityRegistration_getStatus_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getStatus", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_getRegistrations = function(seqid, input, output) {
  var args = new EzSecurityRegistration_getRegistrations_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRegistrations(args.ezToken, function (err, result) {
    var result = new EzSecurityRegistration_getRegistrations_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRegistrations", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_getAllRegistrations = function(seqid, input, output) {
  var args = new EzSecurityRegistration_getAllRegistrations_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getAllRegistrations(args.ezToken, args.status, function (err, result) {
    var result = new EzSecurityRegistration_getAllRegistrations_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getAllRegistrations", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_getAppCerts = function(seqid, input, output) {
  var args = new EzSecurityRegistration_getAppCerts_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getAppCerts(args.ezToken, args.id, function (err, result) {
    var result = new EzSecurityRegistration_getAppCerts_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getAppCerts", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_addAdmin = function(seqid, input, output) {
  var args = new EzSecurityRegistration_addAdmin_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addAdmin(args.ezToken, args.id, args.admin, function (err, result) {
    var result = new EzSecurityRegistration_addAdmin_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addAdmin", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

EzSecurityRegistrationProcessor.prototype.process_removeAdmin = function(seqid, input, output) {
  var args = new EzSecurityRegistration_removeAdmin_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.removeAdmin(args.ezToken, args.id, args.admin, function (err, result) {
    var result = new EzSecurityRegistration_removeAdmin_result((err != null ? err : {success: result}));
    output.writeMessageBegin("removeAdmin", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

